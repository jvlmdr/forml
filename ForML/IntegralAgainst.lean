import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.SpecialFunctions.JapaneseBracket
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.MeasureTheory.Measure.VectorMeasure

import ForML.LpHoelder
import ForML.SchwartzLp

-- https://github.com/leanprover/lean4/issues/2220
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)

open MeasureTheory SchwartzSpace
open scoped BigOperators Real NNReal ENNReal

-- Plan is to define mapping from `L1` to `L1`,
-- then show continuous,
-- then transfer to `ùì¢(E, F)` using `ContinuousLinearMap.comp`.

namespace SchwartzMap

variable {ùïú E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

section Lp

variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]
variable [CompleteSpace F]
variable [NontriviallyNormedField ùïú]  -- Required by `MeasureTheory.integral_smul`.
variable [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

-- TODO: Define using `g : Lp (Œ± := E) ùïú p` or just `g : E ‚Üí ùïú`?
noncomputable def integral_Lp_smul {p : ENNReal}
    (g : Lp (Œ± := E) ùïú p) (œÜ : ùì¢(E, F)) : F :=
  ‚à´ (x : E), g x ‚Ä¢ œÜ x

lemma integral_Lp_smul_def {p : ENNReal} {g : Lp (Œ± := E) ùïú p} {œÜ : ùì¢(E, F)} :
    integral_Lp_smul g œÜ = ‚à´ (x : E), g x ‚Ä¢ œÜ x := by rfl

-- TODO: Define these as bilinear CLM? Although depends on topology of `g`?
lemma integral_Lp_smul_add {p : ENNReal} (hp : 1 ‚â§ p)
    (g : Lp (Œ± := E) ùïú p) (œÜ Œ∏ : ùì¢(E, F)) :
    integral_Lp_smul g (œÜ + Œ∏) = integral_Lp_smul g œÜ + integral_Lp_smul g Œ∏ := by
  simp [integral_Lp_smul]
  have hpq := ENNReal.conjugate_conjugateExponent hp
  generalize p.conjugateExponent = q at hpq
  rw [integral_add]
  . exact integrable_Lp_smul_Lq hpq (Lp.mem‚Ñíp g) (œÜ.mem‚Ñíp q)
  . exact integrable_Lp_smul_Lq hpq (Lp.mem‚Ñíp g) (Œ∏.mem‚Ñíp q)

-- Note: Doesn't require `1 ‚â§ p`?
lemma integral_Lp_smul_smul {p : ENNReal}
    (g : Lp (Œ± := E) ùïú p) (c : ùïú) (œÜ : ùì¢(E, F)) :
    integral_Lp_smul g (c ‚Ä¢ œÜ) = c ‚Ä¢ integral_Lp_smul g œÜ := by
  simp [integral_Lp_smul]
  simp_rw [smul_comm _ c]
  rw [integral_smul]

/-- `L1.integral` of `L1_of_Lp_smul_Lq _ _ (SchwartzMap.toLp œÜ _)` as an integral. -/
lemma L1_integral_Lp_smul_Lq_eq_integral {p q : ENNReal} (hpq : p‚Åª¬π + q‚Åª¬π = 1) {g : Lp (Œ± := E) ùïú p} {œÜ : ùì¢(E, F)} :
    L1.integral (L1_of_Lp_smul_Lq hpq g (œÜ.toLp q)) = ‚à´ (x : E), g x ‚Ä¢ œÜ x := by
  rw [L1.integral_eq_integral]
  rw [integral_congr_ae (coeFn_L1_of_Lp_smul_Lq hpq)]
  refine integral_congr_ae ?_
  simp
  refine Filter.EventuallyEq.smul (by rfl) ?_
  exact SchwartzMap.coeFn_toLp _


-- Want to define `œÜ ‚Ü¶ ‚à´ x, f x ‚Ä¢ œÜ x` as a CLM `ùì¢(E, F) ‚ÜíL[ùïú] F` where `f : Lp ùïú p`.
-- Two options for how to do this...
--
-- 1. Define `g ‚Ü¶ f ‚Ä¢ g` as a CLM `Lp_smul_CLM g : Lp F q ‚ÜíL[ùïú] Lp F 1`,
-- then use `integralCLM ‚àò Lp_smul_CLM g ‚àò SchwartzMap.toLp_CLM`.
-- TODO: Implement `SchwartzMap.toLp_CLM` rather than `SchwartzMap.toL1_CLM`.
--
-- 2. Define `œÜ ‚Ü¶ f ‚àò œÜ` as a CLM `SchwartzMap.Lp_smul_CLM g : ùì¢(E, F) ‚ÜíL[ùïú] ùì¢(E, F)`,
-- then use `integralCLM ‚àò SchwartzMap.toL1_CLM ‚àò SchwartzMap.Lp_smul_CLM g`.
-- This requires that `g ‚Ä¢ œÜ` is a Schwartz map...
-- Which kind of functions
--
-- Option 1 is more broadly useful (for `Lp` rather than just `SchwartzMap`).
-- Option 2 is specific to `SchwartzMap`, but this may be advantageous.
-- For example, we can easily go from `SchwartzMap` to `Lp` but not vice versa.
-- Perhaps this could be remedied showing that `SchwartzMap` is dense in `Lp`?

-- Actually, multiplication by Lp is not general enough!
-- For example, polynomials are tempered distributions, but they are not in Lp for any p.
-- Instead consider multiplication by a function that `HasTemperateGrowth`.
-- Note that this is not general enough to capture all tempered distributions.
-- For example, `x ‚Ü¶ sign x` or `x ‚Ü¶ max 0 x`.

-- TODO: Eventually define as bilinear CLM `Lp ùïú p ‚ÜíL[ùïú] ùì¢(E, F) ‚ÜíL[ùïú] F`?
-- Check type classes.
#check fun (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] => Lp (Œ± := E) ùïú p ‚ÜíL[ùïú] ùì¢(E, F) ‚ÜíL[ùïú] F

-- Can we follow `SchwartzMap.evalCLM` and use `SchwartzMap E (E ‚ÜíL[‚Ñù] F)`?
-- Maybe it's better to propose notation `E ‚Üíùì¢ F` and `E ‚Üí‚Ñí[p] ùïú`?
-- We have a function `smul g œÜ x : F`. Rewrite as `smul x g œÜ`?
-- This might have type... `SchwartzMap E (Lp {E} ùïú p ‚ÜíL[ùïú] F)`?
-- Check type classes.
-- #check fun (p : ‚Ñù‚â•0‚àû) [Fact (1 ‚â§ p)] => SchwartzMap E (Lp (Œ± := E) ùïú p ‚ÜíL[ùïú] F)
-- This would require `NormedSpace ‚Ñù (Lp {E} ùïú p ‚ÜíL[ùïú] F)`.
-- That is, linear functionals on `Lp` as a `NormedSpace`? What's missing? `SMul ‚Ñù` etc.
-- Although, if we *can* this, can we still obtain the *integral* of `f ‚Ä¢ œÜ` as a CLM?

end Lp


section HasTemperateGrowth

variable [NormedField ùïú]  -- Don't need `NontriviallyNormedField ùïú`.
variable [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

/-- Used to define `hasTemperateGrowth_smul_CLM`. -/
lemma exists_hasTemperateGrowth_smul_bound {g : E ‚Üí ‚Ñù} (hg : Function.HasTemperateGrowth g) (k n : ‚Ñï) :
    ‚àÉ (s : Finset (‚Ñï √ó ‚Ñï)) (C : ‚Ñù), 0 ‚â§ C ‚àß ‚àÄ (f : ùì¢(E, F)) (x : E),
      ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (fun x => g x ‚Ä¢ f x) x‚Äñ ‚â§
      C * s.sup (schwartzSeminormFamily ùïú E F) f := by
  rcases hg with ‚ü®hg_smooth, hg_bound‚ü©

  -- We need to show
  -- `‚àÉ s C, ‚àÄ f x, ‚Äñx‚Äñ ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (g ‚Ä¢ f) x‚Äñ ‚â§ C * s.sup (schwartzSeminormFamily ùïú E F) f`,
  -- for which it is sufficient to show
  -- `‚àÉ s C, ‚àÄ f x, (1 + ‚Äñx‚Äñ) ^ k * ‚ÄñiteratedFDeriv ‚Ñù n (g ‚Ä¢ f) x‚Äñ ‚â§ C * s.sup (schwartzSeminormFamily ùïú E F) f`.
  -- In particular, we need to find `s, C` that hold for all `i`.

  -- From `one_add_le_sup_seminorm_apply`, with `k_f ‚â§ m.1` and `i ‚â§ m.2`, we have
  -- (1) `‚àÄ f x, (1 + ‚Äñx‚Äñ) ^ k_f * ‚ÄñiteratedFDeriv ‚Ñù i f x‚Äñ ‚â§ 2 ^ m.1 * (Finset.Iic m).sup (schwartzSeminormFamily ùïú E F) f`.
  -- From `HasTemperateGrowth g`, we have
  -- (2) `‚àÄ n, ‚àÉ k C, ‚àÄ x, ‚ÄñiteratedFDeriv ‚Ñù n g x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k`.
  -- From `norm_iteratedFDeriv_smul_le`, we have
  -- (3) `‚ÄñiteratedFDeriv ‚Ñù n (f ‚Ä¢ g) x‚Äñ ‚â§ ‚àë i in Finset.range (n + 1), n.choose i * ‚ÄñiteratedFDeriv ‚Ñù i f x‚Äñ * ‚ÄñiteratedFDeriv ‚Ñù (n - i) g x‚Äñ`.

  -- From (2), we can find `k_g, C_g` such that `‚ÄñiteratedFDeriv ‚Ñù i g x‚Äñ ‚â§ C_g * (1 + ‚Äñx‚Äñ) ^ k_g` for all `i ‚â§ n`.
  -- We can then combine
  -- `(1 + ‚Äñx‚Äñ) ^ k_f * ‚ÄñiteratedFDeriv ‚Ñù i f x‚Äñ ‚â§ 2 ^ m.1 * (Finset.Iic m).sup (schwartzSeminormFamily ùïú E F) f`
  -- `‚ÄñiteratedFDeriv ‚Ñù (n - i) g x‚Äñ ‚â§ C_g * (1 + ‚Äñx‚Äñ) ^ k_g`
  -- `‚àë i in Finset.range (n + 1), n.choose i = 2 ^ n`
  -- to obtain
  -- `2 ^ n * (1 + ‚Äñx‚Äñ) ^ k_f * ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ`
  --   `‚â§ 2 ^ m.1 * C_g * (1 + ‚Äñx‚Äñ) ^ k_g * (Finset.Iic m).sup (schwartzSeminormFamily ùïú E F) f`.
  -- We need `k_f - k_g ‚â• k` to obtain an upper bound on `(1 + ‚Äñx‚Äñ) ^ k_f * ...`.
  -- Therefore set `k_f = k + k_g`.
  -- For `m`, we require `m.1 ‚â• k_f` and `m.2 ‚â• n`.
  -- We could either set `m.1 = max k_f n` (`= max (k + k_g) n`) to have `2 ^ n ‚â§ 2 ^ m.1`,
  -- or just incorporate the `2 ^ n` factor into `C`.
  -- Therefore we set `s = Finset.Iic (k + k_g, max n k)` and `C = 2 ^ m.1 * C_g`.

  -- Take maximum `k` and maximum `C` to obtain bound on derivatives of `g` for all `i`.
  have (m) : ‚àÉ k C, 0 ‚â§ C ‚àß ‚àÄ i ‚àà Finset.range m, ‚àÄ (x : E), ‚ÄñiteratedFDeriv ‚Ñù i g x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k
  . induction m with
    | zero => simp; use 0
    | succ m h_ind =>
      specialize hg_bound m
      rcases hg_bound with ‚ü®k_m, C_m, hC_m‚ü©
      rcases h_ind with ‚ü®k_i, C_i, ‚ü®hC_i_nonneg, hC_i‚ü©‚ü©
      refine ‚ü®max k_i k_m, max C_i C_m, ?_‚ü©
      refine And.intro (le_trans hC_i_nonneg (by simp)) ?_
      intro i hi x
      simp [Nat.lt_succ] at hi
      simp at hC_i
      cases lt_or_eq_of_le hi with
      | inl hi =>
        specialize hC_i i hi x
        refine le_trans hC_i ?_
        refine mul_le_mul ?_ (pow_le_pow ?_ ?_) ?_ (le_trans hC_i_nonneg ?_) <;> simp
      | inr hi =>
        rw [hi]
        specialize hC_m x
        refine le_trans hC_m ?_
        refine mul_le_mul ?_ (pow_le_pow ?_ ?_) ?_ (le_trans hC_i_nonneg ?_) <;> simp
  specialize this (n + 1)
  rcases this with ‚ü®k_g, C_g, ‚ü®hC_g_nonneg, hC_g‚ü©‚ü©

  use Finset.Iic (k + k_g, n)
  use 2 ^ (k + k_g) * 2 ^ n * C_g
  norm_num
  simp [hC_g_nonneg]
  intro f x
  refine le_trans (mul_le_mul_of_nonneg_left
    (norm_iteratedFDeriv_smul_le hg_smooth (f.smooth ‚ä§) x (le_top : (n : ‚Ñï‚àû) ‚â§ ‚ä§))
    (by simp : 0 ‚â§ ‚Äñx‚Äñ ^ k)) ?_

  -- Move `‚Äñx‚Äñ ^ k` inside sum and bound each summand.
  rw [Finset.mul_sum]
  suffices : ‚àÄ i ‚àà Finset.range (n + 1),
      ‚Äñx‚Äñ ^ k * (n.choose i * ‚ÄñiteratedFDeriv ‚Ñù i g x‚Äñ * ‚ÄñiteratedFDeriv ‚Ñù (n - i) f x‚Äñ) ‚â§
      2 ^ (k + k_g) * n.choose i * C_g * (Finset.Iic (k + k_g, n)).sup (schwartzSeminormFamily ùïú E F) f
  . refine le_trans (Finset.sum_le_sum this) ?_
    clear this
    simp [‚Üê Finset.sum_mul, ‚Üê Finset.mul_sum]
    norm_cast
    rw [Nat.sum_range_choose]

  intro i hi
  simp [Nat.lt_succ] at hi hC_g
  -- Eliminate `choose` term.
  rw [mul_comm (‚Äñx‚Äñ ^ k)]
  rw [mul_comm _ (n.choose i : ‚Ñù)]
  simp [mul_assoc, Nat.choose_pos hi]
  -- Replace `‚Äñx‚Äñ` with `1 + ‚Äñx‚Äñ`.
  simp [‚Üê mul_assoc]
  refine le_trans (mul_le_mul_of_nonneg_left (?_ : ‚Äñx‚Äñ ^ k ‚â§ (1 + ‚Äñx‚Äñ) ^ k) ?_) ?_
  . refine pow_le_pow_of_le_left ?_ ?_ k
    . exact norm_nonneg x
    . exact le_add_of_nonneg_left zero_le_one
  . refine mul_nonneg ?_ ?_ <;> exact norm_nonneg _
  -- Bound on `g`.
  simp [mul_assoc]
  refine le_trans (mul_le_mul_of_nonneg_right (hC_g i hi x) ?_) ?_
  . exact mul_nonneg (norm_nonneg _) (by simp)
  -- Eliminate `C_g`.
  simp [‚Üê mul_assoc]
  rw [mul_comm _ C_g]
  simp [mul_assoc]
  refine mul_le_mul_of_nonneg_left ?_ hC_g_nonneg
  -- Merge terms.
  rw [mul_comm _ (_ ^ k)]
  simp [‚Üê mul_assoc]
  rw [‚Üê pow_add]
  rw [add_comm k_g k]
  -- Bound on `f`.
  have : (1 + ‚Äñx‚Äñ) ^ (k + k_g) * ‚ÄñiteratedFDeriv ‚Ñù (n - i) f x‚Äñ ‚â§ _ :=
    one_add_le_sup_seminorm_apply (ùïú := ùïú) (m := (k + k_g, n)) ?_ ?_ f x <;> simp
  simpa using this


section Def  -- Make ùïú explicit.
variable (ùïú)

-- TODO: Possible/useful to generalize to `‚ÜíSL[œÉ]` with `ùïú` and `ùïú'`?
def hasTemperateGrowth_smul_CLM {g : E ‚Üí ‚Ñù} (hg : Function.HasTemperateGrowth g) :
    ùì¢(E, F) ‚ÜíL[ùïú] ùì¢(E, F) :=
  mkCLM (fun œÜ x => (g ‚Ä¢ œÜ) x)
    (fun œÜ Œ∏ x => by simp)
    (fun a œÜ x => smul_comm (g x) a (œÜ x))
    (fun œÜ => ContDiff.smul hg.1 (œÜ.smooth ‚ä§))
    (fun m => exists_hasTemperateGrowth_smul_bound hg m.1 m.2)

end Def

lemma hasTemperateGrowth_smul_CLM_apply
    {g : E ‚Üí ‚Ñù} (hg : Function.HasTemperateGrowth g) {œÜ : ùì¢(E, F)} {x : E} :
    hasTemperateGrowth_smul_CLM ùïú hg œÜ x = g x ‚Ä¢ œÜ x := rfl

end HasTemperateGrowth

section Integral

variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]
variable [NontriviallyNormedField ùïú]
variable [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

variable (ùïú)

noncomputable def integral_hasTemperateGrowth_smul_CLM [CompleteSpace F]
    {g : E ‚Üí ‚Ñù} (hg : Function.HasTemperateGrowth g) : ùì¢(E, F) ‚ÜíL[ùïú] F :=
  ContinuousLinearMap.comp (integralCLM ùïú) (hasTemperateGrowth_smul_CLM ùïú hg)

end Integral

end SchwartzMap


section Const

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

lemma Function.hasTemperateGrowth_const {c : F} : Function.HasTemperateGrowth (fun (_ : E) => c) := by
  refine ‚ü®contDiff_const, ?_‚ü©
  intro n
  cases n with
  | zero => refine ‚ü®0, ‚Äñc‚Äñ, ?_‚ü©; simp
  | succ n => refine ‚ü®0, 0, ?_‚ü©; simp [iteratedFDeriv_const_of_ne, Nat.succ_ne_zero]

end Const


-- TODO: Move to `LpHoelder`.
-- Easier to keep it here for planning; avoids need to rebuild dependency.
namespace Lp

variable {E : Type*} [MeasurableSpace E]
variable {Œº : Measure E}

variable {ùïú : Type*} [NormedField ùïú]
variable {F : Type*} [NormedAddCommGroup F]
-- variable [SMulZeroClass ùïú F] [BoundedSMul ùïú F]

variable {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)]
variable {f : Lp ùïú p Œº}

/-- Defines `g ‚Ü¶ ‚à´ x, f x ‚Ä¢ g x` with `f : Lp` and `g : Lq` as a CLM.

TODO: Define as a bilinear CLM?
-/
noncomputable def Lp_smul_CLM {p : ‚Ñù‚â•0‚àû} [hp : Fact (1 ‚â§ p)] (f : Lp ùïú p Œº) :
    Lp ùïú 2 Œº ‚ÜíL[ùïú] Lp ùïú 1 Œº where
  toFun :=

    sorry
  map_add' := sorry
  map_smul' := sorry
  cont := sorry

end Lp


-- -- Plan is to define mapping from `L1` to `L1`,
-- -- then show continuous,
-- -- then transfer to `ùì¢(E, F)` using `ContinuousLinearMap.comp`.
-- section L1

-- variable {Œ± : Type*}
-- variable {E : Type*} [NormedAddCommGroup E]
-- variable {ùïú : Type*} [NormedField ùïú] [NormedSpace ùïú E]

-- lemma memL1_mem‚Ñíp_top_smul [MeasurableSpace Œ±] {g : Œ± ‚Üí ùïú} {Œº : Measure Œ±}
--     (hg : Mem‚Ñíp g ‚ä§ Œº) (f : Lp E 1 Œº) :
--     Mem‚Ñíp (g ‚Ä¢ (f : Œ± ‚Üí E)) 1 Œº := by
--   refine And.intro ?_ ?_
--   . exact AEStronglyMeasurable.smul hg.aestronglyMeasurable (Lp.aestronglyMeasurable f)
--   . have : snorm (g ‚Ä¢ (f : Œ± ‚Üí E)) 1 Œº ‚â§ snorm g ‚àû Œº * snorm f 1 Œº
--     . refine snorm_smul_le_mul_snorm ?_ ?_ (by norm_num)
--       . exact Lp.aestronglyMeasurable f
--       . exact hg.aestronglyMeasurable
--     refine lt_of_le_of_lt this ?_
--     refine ENNReal.mul_lt_top ?_ ?_
--     . exact Mem‚Ñíp.snorm_ne_top hg
--     . exact Lp.snorm_ne_top f

-- lemma memL1_aestronglyMeasurable_smul_of_ae_bound {g : Œ± ‚Üí ùïú} [MeasurableSpace Œ±]
--     {Œº : Measure Œ±}
--     (hg_meas : AEStronglyMeasurable g Œº)
--     {C : ‚Ñù} (hg_bound : ‚àÄ·µê x ‚àÇŒº, ‚Äñg x‚Äñ ‚â§ C)
--     (f : Lp E 1 Œº) :
--     Mem‚Ñíp (g ‚Ä¢ (f : Œ± ‚Üí E)) 1 Œº := by
--   refine memL1_mem‚Ñíp_top_smul ?_ f
--   exact mem‚Ñíp_top_of_bound hg_meas C hg_bound

-- lemma memL1_continuous_smul_of_bound {g : Œ± ‚Üí ùïú} [MeasurableSpace Œ±]
--     [TopologicalSpace Œ±] [OpensMeasurableSpace Œ±] [SecondCountableTopologyEither Œ± ùïú]
--     (hg_cont : Continuous g)
--     {C : ‚Ñù} (hg_bound : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ C)
--     {Œº : Measure Œ±}
--     (f : Lp E 1 Œº) :
--     Mem‚Ñíp (g ‚Ä¢ (f : Œ± ‚Üí E)) 1 Œº :=
--   memL1_aestronglyMeasurable_smul_of_ae_bound
--     hg_cont.aestronglyMeasurable (ae_of_all Œº hg_bound) f

-- -- Can show that function is ae `< ‚àû`, but not `‚â§ C`.
-- lemma Mem‚Ñíp_nnreal_ae_lt_top [MeasurableSpace Œ±] {p : NNReal} (hp : p ‚â† 0) {f : Œ± ‚Üí E}
--     (Œº : Measure Œ± := by volume_tac)
--     (hf : Mem‚Ñíp f p Œº) :
--     ‚àÄ·µê x ‚àÇŒº, (‚Äñf x‚Äñ‚Çä : ENNReal) < ‚ä§ := by
--   suffices : ‚àÄ·µê x ‚àÇŒº, (‚Äñf x‚Äñ‚Çä ^ (p : ‚Ñù) : ENNReal) < ‚ä§
--   . exact Filter.Eventually.congr this (by simp)
--   refine ae_lt_top' ?_ ?_
--   . refine AEMeasurable.coe_nnreal_ennreal (AEMeasurable.pow_const ?_ _)
--     exact hf.aestronglyMeasurable.nnnorm.aemeasurable
--   rw [‚Üê lt_top_iff_ne_top]
--   rcases hf with ‚ü®_, hf‚ü©
--   rw [snorm_lt_top_iff_lintegral_rpow_nnnorm_lt_top] at hf
--   rotate_left
--   . norm_cast
--   . simp
--   simp at hf
--   simp_rw [ENNReal.coe_rpow_of_nonneg _ (NNReal.coe_nonneg p)] at hf
--   exact hf

-- -- TODO: Are there conditions under which we can obtain `Lp _ ‚àû` from `Lp _ p`?
-- -- Would it help to assume `continuous` or `volume`?
-- -- Mainly need to show that function doesn't go to infinity on a set of positive measure?
-- lemma mem‚Ñíp_top_of_mem‚Ñíp_volume [MeasureSpace Œ±] {p : ENNReal} {g : Œ± ‚Üí ùïú}
--     (hg : Mem‚Ñíp g p) (hp : 1 ‚â§ p) : Mem‚Ñíp g ‚ä§ := by
--   cases p with
--   | none => exact hg
--   | some p =>
--     simp at hg hp
--     have hp_pos : 0 < p := lt_of_lt_of_le zero_lt_one hp
--     rcases hg with ‚ü®hg_meas, hg_bound‚ü©
--     refine And.intro hg_meas ?_
--     simp
--     simp [snorm, hp_pos.ne', snorm'] at hg_bound
--     suffices : ‚àÉ C, ‚àÄ·µê (x : Œ±) ‚àÇvolume, ‚Äñg x‚Äñ ‚â§ C
--     . rcases this with ‚ü®C, hC‚ü©
--       exact snormEssSup_lt_top_of_ae_bound hC
--     sorry

-- -- lemma memL1_integralAgainst_mem‚Ñíp_nnreal [TopologicalSpace Œ±] [MeasureSpace Œ±]
-- --     {p : NNReal} (hp : 1 ‚â§ p)
-- --     {g : Œ± ‚Üí ùïú} (hg : Mem‚Ñíp g p)
-- --     (f : Lp E 1) :
-- --     Mem‚Ñíp (g ‚Ä¢ (f : Œ± ‚Üí E)) 1 := by
-- --   -- suffices : ‚àÉ C, ‚àÄ·µê (x : Œ±) ‚àÇvolume, ‚Äñg x‚Äñ ‚â§ C
-- --   -- . rcases this with ‚ü®C, hC‚ü©
-- --   --   exact memL1_integralAgainst_bound volume hg.aestronglyMeasurable hC f
-- --   refine memL1_integralAgainstMem‚Ñíp_top ?_ f
-- --   exact mem‚Ñíp_top_of_mem‚Ñíp_volume hg (by norm_cast)

-- end L1


-- namespace SchwartzMap

-- variable {ùïú : Type*} [NontriviallyNormedField ùïú]
-- variable {E F : Type*}
-- variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
-- variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]
-- variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [CompleteSpace F]
-- variable [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

-- -- Define specifically for `ùì¢(E, F)` since Schwartz maps are in `Lp` for any `p`.
-- -- TODO: Possible to generalize to `L1` using equivalence to functions on `[0, 1]`?
-- lemma memL1_mem‚Ñíp_smul {p : ENNReal} (hp : 1 ‚â§ p)
--     {g : E ‚Üí ùïú} (hg : Mem‚Ñíp g p) (f : ùì¢(E, F)) :
--     Mem‚Ñíp (g ‚Ä¢ (f : E ‚Üí F)) 1 := by
--   refine And.intro ?_ ?_
--   . exact AEStronglyMeasurable.smul hg.aestronglyMeasurable f.continuous.aestronglyMeasurable
--   . -- 1/p + 1/q = 1; q = p / (p-1) = 1 / (1 - 1/p)
--     generalize hq : (1 - p‚Åª¬π)‚Åª¬π = q
--     -- have hq' : 1 ‚â§ q
--     -- . simp [‚Üê hq]
--     have hpq : 1/1 = 1/p + 1/q
--     . simp [‚Üê hq, hp]
--     have : snorm (g ‚Ä¢ (f : E ‚Üí F)) 1 volume ‚â§ snorm g p volume * snorm f q volume
--     . refine snorm_smul_le_mul_snorm ?_ ?_ hpq
--       . exact f.continuous.aestronglyMeasurable
--       . exact hg.aestronglyMeasurable
--     refine lt_of_le_of_lt this ?_
--     refine ENNReal.mul_lt_top ?_ ?_
--     . exact Mem‚Ñíp.snorm_ne_top hg
--     . rw [‚Üê lt_top_iff_ne_top]
--       exact snorm_lt_top f


-- noncomputable def integralAgainstMem‚ÑípLM
--     {p : ENNReal} (hp : 1 ‚â§ p) {g : E ‚Üí ùïú} (hg : Mem‚Ñíp g p) :
--     ùì¢(E, F) ‚Üí‚Çó[ùïú] F where
--   -- toFun œÜ := L1.integralCLM (Mem‚Ñíp.toLp _ (memL1_mem‚Ñíp_smul hp hg œÜ))
--   toFun œÜ := L1.integral (Mem‚Ñíp.toLp _ (memL1_mem‚Ñíp_smul hp hg œÜ))
--   map_add' œÜ œÜ' := by
--     simp
--     sorry
--   map_smul' d œÜ := by
--     simp
--     sorry

-- lemma integralAgainstMem‚ÑípLM_apply {p : ENNReal} (hp : 1 ‚â§ p)
--     {g : E ‚Üí ùïú} (hg : Mem‚Ñíp g p) (œÜ : ùì¢(E, F)) :
--     integralAgainstMem‚ÑípLM hp hg œÜ = ‚à´ (x : E), g x ‚Ä¢ œÜ x := by
--   simp [integralAgainstMem‚ÑípLM]
--   -- rw [‚Üê integral_eq]
--   -- simp [L1.integral_eq_integral]
--   -- simp [Mem‚Ñíp.coeFn_toLp]
--   sorry


-- /- Helper for `integralAgainstContinuousCLM`. -/
-- noncomputable def integralAgainstContinuousLM [CompleteSpace F] {g : E ‚Üí ùïú}
--     (hg_meas : MeasureTheory.AEStronglyMeasurable g volume)
--     (hg_bdd : essSup (fun x => (‚Äñg x‚Äñ‚Çä : ENNReal)) volume ‚â† ‚ä§) :
--     ùì¢(E, F) ‚Üí‚Çó[ùïú] F where
--   toFun œÜ := ‚à´ (x : E), g x ‚Ä¢ œÜ x
--   map_add' œÜ œÜ' := by
--     simp
--     rw [integral_add]
--     . refine Integrable.essSup_smul œÜ.integrable hg_meas hg_bdd
--     . refine Integrable.essSup_smul œÜ'.integrable hg_meas hg_bdd
--   map_smul' d œÜ := by
--     simp
--     rw [‚Üê integral_smul]
--     simp_rw [smul_comm d]

-- /- Integration against a continuous function as a CLM. -/
-- noncomputable def integralAgainstContinuousCLM [CompleteSpace F] (g : E ‚Üí ùïú)
--     (hg_meas : MeasureTheory.AEStronglyMeasurable g volume)
--     (hg_bdd : essSup (fun x => (‚Äñg x‚Äñ‚Çä : ENNReal)) volume ‚â† ‚ä§) :
--     ùì¢(E, F) ‚ÜíL[ùïú] F where
--   toLinearMap := integralAgainstContinuousLM g hg_meas hg_bdd
--   cont := by
--     simp
--     sorry
--   -- cont := by
--   --   simp
--   --   refine Continuous.comp _ (toL1_CLM ùïú)
--   --   refine Continuous.comp _ (Lp.continuous_inner_left _)
--   --   exact Continuous.comp _ (Continuous.prod_map Continuous.id Continuous.id)

-- /- Integration against a measure as a CLM. -/
-- noncomputable def integralAgainstMeasureLM [CompleteSpace F] (Œº : Measure E) :
--     ùì¢(E, F) ‚Üí‚Çó[ùïú] F where
--   toFun œÜ := ‚à´ (x : E), œÜ x ‚àÇŒº
--   map_add' œÜ œÜ' := by
--     simp
--     rw [integral_add]
--     . sorry
--     . sorry
--   map_smul' d œÜ := by
--     simp
--     rw [‚Üê integral_smul]
--   -- cont := by
--   --   simp
--   --   refine Continuous.comp _ (toL1_CLM ùïú)
--   --   refine Continuous.comp _ (Lp.continuous_inner_left _)
--   --   exact Continuous.comp _ (Continuous.prod_map Continuous.id Continuous.id)

-- -- TODO: Define a CLM by integration with a vector measure.
-- -- noncomputable def integral_vectorMeasure_CLM [CompleteSpace F] (Œº : VectorMeasure E ùïú) :
-- --     ùì¢(E, F) ‚ÜíL[ùïú] F where

-- end SchwartzMap
