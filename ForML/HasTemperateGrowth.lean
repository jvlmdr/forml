import Mathlib.Analysis.Distribution.SchwartzSpace

import ForML.Util

-- https://github.com/leanprover/lean4/issues/2220
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)

open scoped Real Complex SchwartzSpace BigOperators

section Basic

variable {E F G : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

-- Convenience lemma.
lemma Function.HasTemperateGrowth.differentiable {g : E ‚Üí F} (hg : Function.HasTemperateGrowth g) :
    Differentiable ‚Ñù g :=  hg.1.differentiable le_top

/-- Any constant function is a trivial example of `HasTemperateGrowth`. -/
lemma Function.hasTemperateGrowth_const (c : F) : Function.HasTemperateGrowth (fun _ : E => c) := by
  refine ‚ü®contDiff_const, ?_‚ü©
  intro n
  refine ‚ü®0, ‚Äñc‚Äñ, ?_‚ü©
  cases n <;> simp [iteratedFDeriv_const_of_ne]

/-- Any Schwartz function is a trivial example of `HasTemperateGrowth`. -/
lemma SchwartzMap.hasTemperateGrowth (f : ùì¢(E, F)) : Function.HasTemperateGrowth f := by
  refine ‚ü®f.smooth', ?_‚ü©
  intro n
  have hf_decay := f.decay' 0 n
  rcases hf_decay with ‚ü®C, hC‚ü©
  simp at hC
  refine ‚ü®0, C, ?_‚ü©
  simpa

end Basic


section Util

variable {E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- Convenient lemma for bounding `choose` sums. -/
lemma Finset.sum_range_choose_smul_le_pow_two_smul {R : Type*} [OrderedAddCommMonoid R] [OrderedSMul ‚Ñï R]
    {n : ‚Ñï} {f : ‚Ñï ‚Üí R} {B : R} (h : ‚àÄ i ‚àà Finset.range (n + 1), f i ‚â§ B) :
    ‚àë i in Finset.range (n + 1), n.choose i ‚Ä¢ f i ‚â§ 2 ^ n ‚Ä¢ B := by
  rw [‚Üê Nat.sum_range_choose]
  rw [Finset.sum_smul]
  refine Finset.sum_le_sum ?_
  intro i hi
  exact smul_le_smul_of_nonneg (h i hi) (Nat.zero_le _)

/-- Convenient lemma for bounding `choose` sums.

TODO: Possible to define for general `LinearOrdered[Cancel]AddCommMonoid R`, e.g. `‚Ñï` and `‚Ñ§`?
-/
lemma Finset.sum_range_choose_mul_le_pow_two_mul_real
    {n : ‚Ñï} {f : ‚Ñï ‚Üí ‚Ñù} {B : ‚Ñù} (h : ‚àÄ i ‚àà Finset.range (n + 1), f i ‚â§ B) :
    ‚àë i in Finset.range (n + 1), n.choose i * f i ‚â§ 2 ^ n * B := by
  simp only [‚Üê nsmul_eq_mul]
  exact Finset.sum_range_choose_smul_le_pow_two_smul h

-- TODO: Rename/move this?
-- TODO: Maybe there is machinery in BigO to do this?
/-- Take maximum `k` and maximum `C` to obtain bounding monomial for all `i < n`. -/
lemma bound_forall_range (n : ‚Ñï) {f : ‚Ñï ‚Üí E ‚Üí ‚Ñù}
    (h : ‚àÄ i, i < n ‚Üí ‚àÉ (k : ‚Ñï) (C : ‚Ñù), ‚àÄ x, f i x ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k) :
    ‚àÉ (k : ‚Ñï) (C : ‚Ñù), 0 ‚â§ C ‚àß ‚àÄ i, i < n ‚Üí ‚àÄ x, f i x ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k := by
  induction n with
  | zero => simp; use 0
  | succ n h_ind =>
    specialize h_ind ?_  -- Feels like we shouldn't have to do this?
    . intro i hi
      refine h _ ?_
      exact lt_trans hi (Nat.lt_succ_self _)
    specialize h n (Nat.lt_succ_self _)
    rcases h with ‚ü®k_m, C_m, hC_m‚ü©
    rcases h_ind with ‚ü®k_i, C_i, ‚ü®hC_i_nonneg, hC_i‚ü©‚ü©
    refine ‚ü®max k_i k_m, max C_i C_m, ?_‚ü©
    refine And.intro (le_trans hC_i_nonneg (by simp)) ?_
    intro i hi x
    simp [Nat.lt_succ] at hi
    cases lt_or_eq_of_le hi with
    | inl hi =>
      specialize hC_i i hi x
      refine le_trans hC_i ?_
      refine mul_le_mul ?_ (pow_le_pow ?_ ?_) ?_ (le_trans hC_i_nonneg ?_) <;> simp
    | inr hi =>
      rw [hi]
      specialize hC_m x
      refine le_trans hC_m ?_
      refine mul_le_mul ?_ (pow_le_pow ?_ ?_) ?_ (le_trans hC_i_nonneg ?_) <;> simp

/-- Take maximum `k` and maximum `C` to obtain bound on derivatives of `g` for all `i < n`. -/
lemma Function.HasTemperateGrowth.bound_forall_range (n : ‚Ñï) {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    ‚àÉ k C, 0 ‚â§ C ‚àß ‚àÄ i ‚àà Finset.range n, ‚àÄ (x : E), ‚ÄñiteratedFDeriv ‚Ñù i f x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k := by
  simp
  refine _root_.bound_forall_range n ?_
  intro i _
  exact hf.2 i

/-- The Fr√©chet derivative of a `HasTemperateGrowth` function is a `HasTemperateGrowth` function. -/
lemma Function.HasTemperateGrowth.fderiv {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth (fun x => fderiv ‚Ñù f x) := by
  refine ‚ü®hf.1.fderiv_right le_top, ?_‚ü©
  intro n
  rcases bound_forall_range (n + 2) hf with ‚ü®k, C, ‚ü®_, hC‚ü©‚ü©
  refine ‚ü®k, C, ?_‚ü©
  intro x
  suffices : ‚ÄñiteratedFDeriv ‚Ñù (n + 1) (fun x => f x) x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k
  . simpa [iteratedFDeriv_succ_eq_comp_right] using this
  refine hC (n + 1) ?_ x
  exact Finset.self_mem_range_succ (n + 1)

end Util


namespace Function

section Compose

variable {E F G : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]

-- TODO: Could this be more easily proved using BigO?
/-- The composition of two `HasTemperateGrowth` functions is a `HasTemperateGrowth` function. -/
theorem HasTemperateGrowth.comp
      {g : F ‚Üí G} (hg : HasTemperateGrowth g)
      {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth fun x => g (f x) := by
  refine ‚ü®ContDiff.comp hg.1 hf.1, ?_‚ü©
  intro n
  -- Obtain `k, C` for derivatives of `g` and `f`.
  have hg_bound := hg.bound_forall_range (n + 1)
  have hf_bound := hf.bound_forall_range (n + 1)
  simp [Nat.lt_succ] at hg_bound hf_bound
  rcases hg_bound with ‚ü®k_g, C_g, ‚ü®hC_g_nonneg, hC_g‚ü©‚ü©
  rcases hf_bound with ‚ü®k_f, C_f, ‚ü®_, hC_f‚ü©‚ü©
  -- Also obtain `k, C` for f itself to bound `(1 + ‚Äñf x‚Äñ) ^ k_g` by a power of `1 + ‚Äñx‚Äñ`.
  have hf0 := hf.2 0
  simp at hf0
  rcases hf0 with ‚ü®k_f0, C_f0, hC_f0‚ü©

  -- Eventually need to show:
  -- `n.factorial * (C_g * (2 * max 1 C_f0 * (1 + ‚Äñx‚Äñ) ^ k_f0) ^ k_g) * (max 1 C_f * (1 + ‚Äñx‚Äñ) ^ k_f) ^ n ‚â§ C * (1 + ‚Äñx‚Äñ) ^ k`
  -- Therefore:
  use k_f0 * k_g + k_f * n
  use n.factorial * C_g * (2 * max 1 C_f0) ^ k_g * (max 1 C_f) ^ n
  intro x

  -- Establish bounds required for `norm_iteratedFDeriv_comp_le`.
  -- First obtain a bound for `1 + ‚Äñf x‚Äñ` to avoid a `(1 + ‚Äñf x‚Äñ) ^ k_g` term on the left.
  have hf0 : (1 + ‚Äñf x‚Äñ) ‚â§ 2 * max 1 C_f0 * (1 + ‚Äñx‚Äñ) ^ k_f0
  . rw [mul_assoc, two_mul]
    refine add_le_add ?_ ?_
    . simp [one_le_mul_of_one_le_of_one_le]
    . exact le_trans (hC_f0 x) (by simp)
  -- Bound derivatives of `g` at `f x` by a constant `C`.
  have hC : ‚àÄ (i : ‚Ñï), i ‚â§ n ‚Üí ‚ÄñiteratedFDeriv ‚Ñù i g (f x)‚Äñ ‚â§ C_g * (2 * max 1 C_f0 * (1 + ‚Äñx‚Äñ) ^ k_f0) ^ k_g
  . intro i hi
    refine le_trans (hC_g i hi (f x)) ?_
    refine mul_le_mul_of_nonneg_left ?_ hC_g_nonneg
    exact pow_le_pow_of_le_left (by simp) hf0 k_g
  -- Bound derivatives of `f` at `x` by non-zero powers of `D`.
  have hD : ‚àÄ i, 1 ‚â§ i ‚Üí i ‚â§ n ‚Üí ‚ÄñiteratedFDeriv ‚Ñù i f x‚Äñ ‚â§ (max 1 C_f * (1 + ‚Äñx‚Äñ) ^ k_f) ^ i
  . intro i _ hi
    refine le_trans (hC_f i hi x) ?_
    refine le_trans (mul_le_mul_of_nonneg_right (le_max_right 1 C_f) (by simp)) ?_
    refine le_self_pow ?_ (by linarith)
    exact one_le_mul_of_one_le_of_one_le (le_max_left 1 C_f) (by simp)
  refine le_trans (norm_iteratedFDeriv_comp_le hg.1 hf.1 le_top x hC hD) ?_
  refine le_of_eq ?_
  ring_nf

end Compose


section ParametricLinear

variable {D E F : Type*}
variable [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- Application of a parametric `ContinuousLinearMap` is a `HasTemperateGrowth` function. -/
lemma HasTemperateGrowth.clm_apply
    {f : D ‚Üí E ‚ÜíL[‚Ñù] F} (hf : HasTemperateGrowth f)
    {g : D ‚Üí E} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => (f x) (g x) := by
  refine ‚ü®hf.1.clm_apply hg.1, ?_‚ü©
  intro n
  -- Obtain `k, C` for derivatives of `g` and `f`.
  have hf_bound := hf.bound_forall_range (n + 1)
  have hg_bound := hg.bound_forall_range (n + 1)
  rcases hf_bound with ‚ü®k_f, C_f, ‚ü®hC_f_nonneg, hC_f‚ü©‚ü©
  rcases hg_bound with ‚ü®k_g, C_g, ‚ü®_, hC_g‚ü©‚ü©
  use k_f + k_g
  use 2 ^ n * C_f * C_g
  intro x
  refine le_trans (norm_iteratedFDeriv_clm_apply hf.1 hg.1 _ le_top) ?_
  simp [mul_assoc]
  norm_cast
  refine Finset.sum_range_choose_mul_le_pow_two_mul_real ?_
  intro i hi
  refine le_trans (mul_le_mul (hC_f i hi x) (hC_g (n - i) ?_ x) (norm_nonneg _) ?_) ?_
  . simp
    exact Nat.sub_lt_succ n i
  . simp [hC_f_nonneg]
  refine le_of_eq ?_
  ring_nf

-- TODO: Generalize to CLMs with `ùïú`-linearity.

-- variable {ùïú : Type*} [NontriviallyNormedField ùïú]
-- variable [NormedSpace ùïú D] [NormedSpace ùïú E] [NormedSpace ùïú F]
-- variable [NormedAlgebra ‚Ñù ùïú] [IsScalarTower ‚Ñù ùïú F] [SMulCommClass ‚Ñù ùïú F]

-- /-- Application of a parametric `ContinuousLinearMap` is a `HasTemperateGrowth` function. -/
-- lemma HasTemperateGrowth.clm_apply'
--     {f : D ‚Üí E ‚ÜíL[ùïú] F} (hf : HasTemperateGrowth f)
--     {g : D ‚Üí E} (hg : HasTemperateGrowth g) :
--     HasTemperateGrowth fun x => (f x) (g x) := by
--   refine ‚ü®?_, ?_‚ü©
--   . have := ContDiff.clm_apply (ùïú := ‚Ñù) (E := D) (F := E) (G := F) (?_ : ContDiff ‚Ñù ‚ä§ (fun x => (f x).restrictScalars ‚Ñù)) hg.1
--     . exact this
--     . change ContDiff ‚Ñù ‚ä§ fun x => ContinuousLinearMap.restrictScalarsIsometry ùïú E F ‚Ñù ‚Ñù (f x)
--       refine ContDiff.comp ?_ ?_
--       . exact LinearIsometry.contDiff _
--       . exact hf.1
--   -- refine ‚ü®hf.1.clm_apply hg.1, ?_‚ü©
--   intro n
--   -- Obtain `k, C` for derivatives of `g` and `f`.
--   have hf_bound := hf.bound_forall_range (n + 1)
--   have hg_bound := hg.bound_forall_range (n + 1)
--   rcases hf_bound with ‚ü®k_f, C_f, ‚ü®hC_f_nonneg, hC_f‚ü©‚ü©
--   rcases hg_bound with ‚ü®k_g, C_g, ‚ü®_, hC_g‚ü©‚ü©
--   use k_f + k_g
--   use 2 ^ n * C_f * C_g
--   intro x
--   refine le_trans (norm_iteratedFDeriv_clm_apply hf.1 hg.1 _ le_top) ?_
--   simp [mul_assoc]
--   norm_cast
--   refine Finset.sum_range_choose_mul_le_pow_two_mul_real ?_
--   intro i hi
--   refine le_trans (mul_le_mul (hC_f i hi x) (hC_g (n - i) ?_ x) (norm_nonneg _) ?_) ?_
--   . simp
--     exact Nat.sub_lt_succ n i
--   . simp [hC_f_nonneg]
--   refine le_of_eq ?_
--   ring_nf

end ParametricLinear


section Linear

variable {E F G ùî∏ : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
variable [NormedSpace ùïú E] [NormedSpace ùïú F] [NormedSpace ùïú G]
variable [NormedAlgebra ‚Ñù ùïú] [IsScalarTower ‚Ñù ùïú G] [SMulCommClass ‚Ñù ùïú G]

lemma HasTemperateGrowth.clm' (g : F ‚ÜíL[ùïú] G) {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth fun x => g (f x) := by
  change HasTemperateGrowth fun x => g.restrictScalars ‚Ñù (f x)
  exact clm_apply (hasTemperateGrowth_const g) hf

lemma HasTemperateGrowth.clm (g : F ‚ÜíL[‚Ñù] G) {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth fun x => g (f x) :=
  clm_apply (hasTemperateGrowth_const g) hf

-- TODO: Can't use `HasTemperateGrowth.const_clm` with `ContinuousLinearMap.id` due to circular dependency?
lemma hasTemperateGrowth_id : Function.HasTemperateGrowth (id : E ‚Üí E) := by
  refine ‚ü®contDiff_id, ?_‚ü©
  intro n
  refine ‚ü®1, 1, ?_‚ü©
  intro x
  simp
  cases n with
  | zero => simp
  | succ n =>
    rw [iteratedFDeriv_succ_eq_comp_right]
    simp
    cases n with
    | zero => simp; refine le_trans ContinuousLinearMap.norm_id_le (by simp)
    | succ n => simp [iteratedFDeriv_const_of_ne]

lemma hasTemperateGrowth_id' : Function.HasTemperateGrowth (fun x : E => x) := hasTemperateGrowth_id

/-- Any `ContinuousLinearMap` is a `HasTemperateGrowth` function. -/
lemma hasTemperateGrowth_clm (a : E ‚ÜíL[‚Ñù] F) : HasTemperateGrowth fun x => a x :=
  hasTemperateGrowth_id.clm a

lemma hasTemperateGrowth_neg : HasTemperateGrowth fun x : E => (-x) := hasTemperateGrowth_clm (-ContinuousLinearMap.id ‚Ñù E)
lemma hasTemperateGrowth_re : HasTemperateGrowth fun x : ‚ÑÇ => x.re := hasTemperateGrowth_clm Complex.reClm
lemma hasTemperateGrowth_im : HasTemperateGrowth fun x : ‚ÑÇ => x.im := hasTemperateGrowth_clm Complex.imClm

lemma HasTemperateGrowth.re {f : E ‚Üí ‚ÑÇ} (hf : HasTemperateGrowth f) : HasTemperateGrowth fun x => (f x).re := clm Complex.reClm hf
lemma HasTemperateGrowth.im {f : E ‚Üí ‚ÑÇ} (hf : HasTemperateGrowth f) : HasTemperateGrowth fun x => (f x).im := clm Complex.imClm hf
lemma HasTemperateGrowth.neg {f : E ‚Üí F} (hf : HasTemperateGrowth f) : HasTemperateGrowth fun x => (-f x) := clm (-ContinuousLinearMap.id ‚Ñù F) hf

section Mul

variable [NormedRing ùî∏] [NormedAlgebra ‚Ñù ùî∏]

lemma hasTemperateGrowth_const_mul (a : ùî∏) : HasTemperateGrowth fun x : ùî∏ => a * x := hasTemperateGrowth_clm (ContinuousLinearMap.mul ‚Ñù ùî∏ a)
lemma hasTemperateGrowth_mul_const (a : ùî∏) : HasTemperateGrowth fun x : ùî∏ => x * a := hasTemperateGrowth_clm ((ContinuousLinearMap.mul ‚Ñù ùî∏).flip a)

lemma HasTemperateGrowth.const_mul (a : ùî∏) {f : E ‚Üí ùî∏} (hf : HasTemperateGrowth f) : HasTemperateGrowth fun x => a * f x := clm (ContinuousLinearMap.mul ‚Ñù ùî∏ a) hf
lemma HasTemperateGrowth.mul_const {f : E ‚Üí ùî∏} (hf : HasTemperateGrowth f) (a : ùî∏) : HasTemperateGrowth fun x => f x * a := clm ((ContinuousLinearMap.mul ‚Ñù ùî∏).flip a) hf

end Mul

section Div

variable [NormedDivisionRing ùî∏] [NormedAlgebra ‚Ñù ùî∏]

lemma hasTemperateGrowth_div_const (a : ùî∏) : HasTemperateGrowth fun x : ùî∏ => x / a := by
  simp_rw [div_eq_mul_inv]
  exact hasTemperateGrowth_mul_const a‚Åª¬π

lemma HasTemperateGrowth.div_const {f : E ‚Üí ùî∏} (hf : HasTemperateGrowth f) (a : ùî∏) : HasTemperateGrowth fun x => f x / a :=
  comp (hasTemperateGrowth_div_const a) hf

end Div

end Linear


section Add

variable {E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

/-- The addition of two `HasTemperateGrowth` functions is a `HasTemperateGrowth` function. -/
theorem HasTemperateGrowth.add
      {f : E ‚Üí F} (hf : HasTemperateGrowth f)
      {g : E ‚Üí F} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => f x + g x := by
  refine ‚ü®ContDiff.add hf.1 hg.1, ?_‚ü©
  intro n
  -- Obtain coefficients for each function.
  rcases hf.2 n with ‚ü®k_f, C_f, hC_f‚ü©
  rcases hg.2 n with ‚ü®k_g, C_g, hC_g‚ü©
  have hC_f_nonneg : 0 ‚â§ C_f
  . have := le_trans (norm_nonneg _) (hC_f 0)
    simpa using this
  have hC_g_nonneg : 0 ‚â§ C_g
  . have := le_trans (norm_nonneg _) (hC_g 0)
    simpa using this
  use max k_f k_g
  use C_f + C_g
  intro x
  change ‚ÄñiteratedFDeriv ‚Ñù n (f + g) x‚Äñ ‚â§ _
  rw [iteratedFDeriv_add_apply (hf.1.of_le le_top) (hg.1.of_le le_top)]
  refine le_trans (norm_add_le _ _) ?_
  simp [add_mul]
  refine add_le_add ?_ ?_
  . refine le_trans (hC_f x) ?_
    refine mul_le_mul_of_nonneg_left ?_ hC_f_nonneg
    exact pow_le_pow (by simp) (by simp)
  . refine le_trans (hC_g x) ?_
    refine mul_le_mul_of_nonneg_left ?_ hC_g_nonneg
    exact pow_le_pow (by simp) (by simp)

lemma HasTemperateGrowth.sub
      {f : E ‚Üí F} (hf : HasTemperateGrowth f)
      {g : E ‚Üí F} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => f x - g x := by
  simp_rw [sub_eq_add_neg]
  refine add hf hg.neg

lemma HasTemperateGrowth.add_const {f : E ‚Üí F} (hf : HasTemperateGrowth f) (c : F) :
    HasTemperateGrowth fun x => f x + c :=
  add hf (hasTemperateGrowth_const c)

lemma HasTemperateGrowth.const_add (c : F) {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth fun x => c + f x :=
  add (hasTemperateGrowth_const c) hf

end Add


section ConstSMul

variable {ùïú E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
variable [NormedField ùïú] [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

example (c : ùïú) (x : F) : c ‚Ä¢ x = (c ‚Ä¢ ContinuousLinearMap.id ‚Ñù F) x := rfl

lemma HasTemperateGrowth.const_smul (c : ùïú) {f : E ‚Üí F} (hf : HasTemperateGrowth f) :
    HasTemperateGrowth fun x => c ‚Ä¢ f x :=
  comp (hasTemperateGrowth_clm (c ‚Ä¢ ContinuousLinearMap.id ‚Ñù F)) hf

end ConstSMul

section SMulConst

variable {ùïú E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
-- TODO: Check types; some fumbling involved.
variable [NormedField ùïú] [NormedAlgebra ‚Ñù ùïú]
variable [Module ùïú F] [IsScalarTower ‚Ñù ùïú F] [ContinuousSMul ùïú F]

example (x : ùïú) (c : F) : x ‚Ä¢ c = (ContinuousLinearMap.id ‚Ñù ùïú).smulRight c x := rfl

lemma HasTemperateGrowth.smul_const {f : E ‚Üí ùïú} (hf : HasTemperateGrowth f) (c : F) :
    HasTemperateGrowth fun x => f x ‚Ä¢ c :=
  comp (hasTemperateGrowth_clm ((ContinuousLinearMap.id ‚Ñù ùïú).smulRight c)) hf

end SMulConst


section Bilinear

variable {E F G H : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
variable [NormedAddCommGroup H] [NormedSpace ‚Ñù H]

lemma HasTemperateGrowth.bilin (B : F ‚ÜíL[‚Ñù] G ‚ÜíL[‚Ñù] H)
    {f : E ‚Üí F} (hf : HasTemperateGrowth f)
    {g : E ‚Üí G} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => B (f x) (g x) :=
  clm_apply (clm B hf) hg

end Bilinear

section SMul

variable {E F : Type*}
variable [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

lemma HasTemperateGrowth.smul
    {f : E ‚Üí ‚Ñù} (hf : HasTemperateGrowth f)
    {g : E ‚Üí F} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => f x ‚Ä¢ g x :=
  bilin (ContinuousLinearMap.smulRightL ‚Ñù ‚Ñù F (ContinuousLinearMap.id ‚Ñù ‚Ñù)) hg hf

end SMul

section Mul

variable {E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NonUnitalNormedRing F] [NormedSpace ‚Ñù F]
variable [IsScalarTower ‚Ñù F F] [SMulCommClass ‚Ñù F F]

lemma HasTemperateGrowth.mul
    {f : E ‚Üí F} (hf : HasTemperateGrowth f)
    {g : E ‚Üí F} (hg : HasTemperateGrowth g) :
    HasTemperateGrowth fun x => f x * g x :=
  bilin (ContinuousLinearMap.mul ‚Ñù F) hf hg

end Mul

end Function  -- namespace
