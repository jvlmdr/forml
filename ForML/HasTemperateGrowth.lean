import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.SpecialFunctions.ExpDeriv
import Mathlib.Analysis.SpecialFunctions.Trigonometric.Deriv

open scoped Real Complex

section Differentiable

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
variable {ùïú' : Type*} [NontriviallyNormedField ùïú'] [NormedAlgebra ùïú ùïú'] [NormedSpace ùïú' ‚ÑÇ]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E]
-- `NormedAlgebra` instead of `NormedSpace` for `Complex.differentiable_exp`
variable [NormedAlgebra ùïú ‚ÑÇ] [IsScalarTower ùïú ùïú' ‚ÑÇ]

lemma Differentiable.cexp_smul_I {f : E ‚Üí ùïú'} (hf : Differentiable ùïú f) :
    Differentiable ùïú fun x => Complex.exp (f x ‚Ä¢ (I : ‚ÑÇ)) :=
  Complex.differentiable_exp.comp (hf.smul_const I)

lemma Complex.differentiable_exp_real_smul_I : Differentiable ‚Ñù (fun x : ‚Ñù => exp (x ‚Ä¢ I)) :=
  Differentiable.cexp_smul_I differentiable_id

end Differentiable


section IteratedDeriv
-- Some useful lemmata for `iteratedDeriv` that avoid passing through `iteratedFDeriv`.
-- TODO: Typeclasses might not be perfect; some trial and error involved.

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedSpace ùïú ‚ÑÇ]
variable {F : Type*} [NormedAddCommGroup F] [NormedSpace ùïú F]
variable {ùïú' : Type*} [NormedField ùïú'] [NormedSpace ùïú' ‚ÑÇ]
variable [NormedAlgebra ùïú ùïú'] [IsScalarTower ùïú ùïú' ‚ÑÇ]

lemma iteratedDeriv_neg_apply {n : ‚Ñï} {f : ùïú ‚Üí F} :
    iteratedDeriv n (fun x => -f x) x = -iteratedDeriv n f x := by
  change iteratedDeriv n (-f) x = _
  simp only [iteratedDeriv_eq_iteratedFDeriv]
  simp [iteratedFDeriv_neg_apply]

lemma iteratedDeriv_const_mul_apply {n : ‚Ñï} (a : ùïú') {f : ùïú ‚Üí ùïú'} (hf : ContDiff ùïú n f) {x : ùïú} :
    iteratedDeriv n (fun x => a * f x) x = a * iteratedDeriv n f x := by
  change iteratedDeriv n (a ‚Ä¢ f) x = _
  simp only [iteratedDeriv_eq_iteratedFDeriv]
  simp [iteratedFDeriv_const_smul_apply hf]

lemma iteratedDeriv_mul_const_apply {n : ‚Ñï} (a : ùïú') {f : ùïú ‚Üí ùïú'} (hf : ContDiff ùïú n f) {x : ùïú} :
    iteratedDeriv n (fun x => f x * a) x = iteratedDeriv n f x * a := by
  simp_rw [mul_comm _ a]
  exact iteratedDeriv_const_mul_apply a hf

end IteratedDeriv


namespace Complex

variable {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚Ñù]

lemma contDiff_exp_real_smul_I {n : ‚Ñï‚àû} : ContDiff ‚Ñù n fun x : ‚Ñù => exp (x ‚Ä¢ I) :=
  ContDiff.cexp (ContDiff.smul contDiff_id contDiff_const)

lemma _root_.ContDiff.cexp_const_mul_real_smul_I {n : ‚Ñï‚àû} {f : ‚Ñù ‚Üí ‚Ñù} (hf : ContDiff ‚Ñù n f) :
    ContDiff ‚Ñù n fun x : ‚Ñù => Complex.exp (f x ‚Ä¢ I) :=
  contDiff_exp_real_smul_I.comp hf

lemma deriv_exp_real_smul_I_apply {x : ‚Ñù} :
    deriv (fun x : ‚Ñù => exp (x ‚Ä¢ I)) x = I * exp (x ‚Ä¢ I) := by
  change deriv (exp ‚àò fun x => (x ‚Ä¢ I)) x = I * cexp (x ‚Ä¢ I)
  rw [deriv.comp _ differentiableAt_exp (differentiableAt_id.smul_const I)]
  rw [Complex.deriv_exp]
  rw [mul_comm]
  congr
  rw [deriv_smul_const differentiableAt_id]
  simp

lemma iteratedDeriv_exp_real_smul_I_apply {n : ‚Ñï} {x : ‚Ñù} :
    iteratedDeriv n (fun x : ‚Ñù => exp (x ‚Ä¢ I)) x = HPow.hPow I n * exp (x ‚Ä¢ I) := by
  induction n with
  | zero => simp
  | succ n hi =>
    rw [iteratedDeriv_succ', pow_succ]
    conv => lhs; arg 2; intro x
    simp only [deriv_exp_real_smul_I_apply]
    rw [iteratedDeriv_const_mul_apply I contDiff_exp_real_smul_I]
    rw [hi, mul_assoc]

lemma deriv_comp_exp_real_smul_I_apply {f : ùïú ‚Üí ‚Ñù} (hf : Differentiable ùïú f) {x : ùïú} :
    deriv (fun x => exp (f x ‚Ä¢ I)) x = cexp (f x ‚Ä¢ I) * (deriv f x ‚Ä¢ I) := by
  change deriv (exp ‚àò (fun x => f x ‚Ä¢ I)) x = _
  rw [deriv.comp _ differentiableAt_exp (hf.smul_const I).differentiableAt]
  rw [deriv_smul_const hf.differentiableAt]
  simp

-- Prove some convenience lemmata for `fun x : ‚Ñù => exp ((a * x) ‚Ä¢ I)`.

lemma contDiff_exp_const_mul_real_smul_I {n : ‚Ñï‚àû} {a : ‚Ñù} :
    ContDiff ‚Ñù n fun x : ‚Ñù => exp ((a * x) ‚Ä¢ I) :=
  ContDiff.cexp_const_mul_real_smul_I (contDiff_const.mul contDiff_id)

-- TODO: Use comp with CLM?
lemma deriv_exp_const_mul_real_smul_I_apply {a : ‚Ñù} {x : ‚Ñù} :
    deriv (fun x : ‚Ñù => exp ((a * x) ‚Ä¢ I)) x = (a ‚Ä¢ I) * exp ((a * x) ‚Ä¢ I) := by
  rw [deriv_comp_exp_real_smul_I_apply]
  swap
  . exact differentiable_id.const_mul a
  rw [mul_comm]
  congr
  rw [deriv_const_mul _ differentiableAt_id]
  simp

-- TODO: Use comp with CLM?
lemma iteratedDeriv_exp_const_mul_real_smul_I_apply {n : ‚Ñï} {a : ‚Ñù} {x : ‚Ñù} :
    iteratedDeriv n (fun x : ‚Ñù => exp ((a * x) ‚Ä¢ I)) x = HPow.hPow (a ‚Ä¢ I) n * exp ((a * x) ‚Ä¢ I) := by
  induction n with
  | zero => simp
  | succ n hi =>
    rw [iteratedDeriv_succ', pow_succ]
    conv => lhs; arg 2; intro x
    simp only [deriv_exp_const_mul_real_smul_I_apply]
    rw [iteratedDeriv_const_mul_apply _ contDiff_exp_const_mul_real_smul_I]
    rw [hi, mul_assoc]

lemma hasTemperateGrowth_exp_real_smul_I :
    Function.HasTemperateGrowth fun x : ‚Ñù => exp (x ‚Ä¢ I) := by
  refine ‚ü®contDiff_exp_real_smul_I, ?_‚ü©
  intro n
  refine ‚ü®n, 1, ?_‚ü©
  intro x
  rw [norm_iteratedFDeriv_eq_norm_iteratedDeriv]
  rw [iteratedDeriv_exp_real_smul_I_apply]
  simp
  exact one_le_pow_of_one_le (by simp) n

-- TODO: Generalize to `f x` with bound on growth?
-- Could there be a `HasTemperateGrowth.comp`? At least with a `ContinuousLinearMap`?
lemma hasTemperateGrowth_exp_const_mul_real_smul_I {a : ‚Ñù} :
    Function.HasTemperateGrowth fun x : ‚Ñù => exp ((a * x) ‚Ä¢ I) := by
  refine ‚ü®contDiff_exp_const_mul_real_smul_I, ?_‚ü©
  intro n
  refine ‚ü®n, HPow.hPow |a| n, ?_‚ü©
  intro x
  rw [norm_iteratedFDeriv_eq_norm_iteratedDeriv]
  rw [iteratedDeriv_exp_const_mul_real_smul_I_apply]
  simp [abs_of_pos, Real.pi_pos]
  norm_cast
  rw [abs_exp_ofReal_mul_I]
  refine mul_le_mul_of_nonneg_left ?_ (pow_nonneg (abs_nonneg a) n)
  exact one_le_pow_of_one_le (by simp) n

-- /-- More general than `contDiff_sin`; matches `contDiff_exp`. -/
-- lemma contDiff_sin' {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] :
--     ContDiff ùïú ‚ä§ sin := by
--   simp [sin]
--   refine ContDiff.div_const (ContDiff.mul ?_ contDiff_const) 2
--   refine ContDiff.sub ?_ ?_
--   . exact ContDiff.cexp (ContDiff.neg (ContDiff.mul contDiff_id contDiff_const))
--   . exact ContDiff.cexp (ContDiff.mul contDiff_id contDiff_const)

-- /-- More general than `contDiff_cos`; matches `contDiff_exp`. -/
-- lemma contDiff_cos' {ùïú : Type*} [NontriviallyNormedField ùïú] [NormedAlgebra ùïú ‚ÑÇ] :
--     ContDiff ùïú ‚ä§ cos := by
--   simp [cos]
--   refine ContDiff.div_const ?_ 2
--   refine ContDiff.add ?_ ?_
--   . exact ContDiff.cexp (ContDiff.mul contDiff_id contDiff_const)
--   . exact ContDiff.cexp (ContDiff.neg (ContDiff.mul contDiff_id contDiff_const))

end Complex


namespace Real

-- Tried using `ContinuousLinearMap.norm_compContinuousMultilinearMap_le` with
-- `‚ÄñiteratedFDeriv ‚Ñù n (Complex.reClm ‚àò Complex.sin ‚àò Complex.ofRealClm) x‚Äñ ‚â§ 1`
-- and then using `LinearIsometryEquiv.norm_iteratedFDeriv_comp_right` with
-- `‚ÄñiteratedFDeriv ‚Ñù n ((Complex.sin ‚àò Subtype.val) ‚àò Complex.ofRealLi.equivRange) x‚Äñ ‚â§ 1`
-- but it was difficult to use the last `Subtype.val`.
-- Easier to just prove `sin` and `cos` together by induction.
-- Could revisit and refer to `ContDiffAt.real_of_complex` as a guide.

/-- Auxiliary function for `abs_iteratedDeriv_{sin,cos}_le`. -/
lemma abs_iteratedDeriv_sin_cos_le {n : ‚Ñï} {x : ‚Ñù} :
    |iteratedDeriv n sin x| ‚â§ 1 ‚àß |iteratedDeriv n cos x| ‚â§ 1 := by
  induction n with
  | zero => simp; exact ‚ü®abs_sin_le_one x, abs_cos_le_one x‚ü©
  | succ n hi =>
    simp [iteratedDeriv_succ']
    refine ‚ü®hi.right, ?_‚ü©
    simp [iteratedDeriv_neg_apply]
    exact hi.left

lemma abs_iteratedDeriv_sin_le {n : ‚Ñï} {x : ‚Ñù} : |iteratedDeriv n sin x| ‚â§ 1 :=
  abs_iteratedDeriv_sin_cos_le.left

lemma abs_iteratedDeriv_cos_le {n : ‚Ñï} {x : ‚Ñù} : |iteratedDeriv n cos x| ‚â§ 1 :=
  abs_iteratedDeriv_sin_cos_le.right

lemma hasTemperateGrowth_sin : Function.HasTemperateGrowth sin := by
  refine ‚ü®contDiff_sin, ?_‚ü©
  intro n
  refine ‚ü®1, 1, ?_‚ü©
  intro x
  simp
  rw [norm_iteratedFDeriv_eq_norm_iteratedDeriv]
  exact le_trans abs_iteratedDeriv_sin_le (le_add_of_nonneg_right (abs_nonneg x))

lemma hasTemperateGrowth_cos : Function.HasTemperateGrowth cos := by
  refine ‚ü®contDiff_cos, ?_‚ü©
  intro n
  refine ‚ü®1, 1, ?_‚ü©
  intro x
  simp
  rw [norm_iteratedFDeriv_eq_norm_iteratedDeriv]
  exact le_trans abs_iteratedDeriv_cos_le (le_add_of_nonneg_right (abs_nonneg x))

lemma hasTemperateGrowth_fourierChar :
    Function.HasTemperateGrowth fun x : ‚Ñù => (Real.fourierChar (Multiplicative.ofAdd x) : ‚ÑÇ) := by
  simp_rw [Real.fourierChar_apply]
  simp_rw [‚Üê Complex.real_smul]
  exact Complex.hasTemperateGrowth_exp_const_mul_real_smul_I

end Real
