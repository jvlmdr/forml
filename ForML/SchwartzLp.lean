import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.SpecialFunctions.JapaneseBracket
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.MeasureTheory.Integral.IntegrableOn
import Mathlib.Tactic.LibrarySearch
import Mathlib.Tactic.Linarith

open ENNReal MeasureTheory SchwartzSpace

-- Eventual goal: Prove that Fourier transform of Dirac is const and vice versa.

-- Want to define tempered distribution for constant function.
-- This corresponds to the integral of the function multiplied by a constant.
-- Therefore, need to prove that `SchartzMap` is integrable.
--
-- Use equivalent definition of Schwartz functions as described in:
-- https://math.stackexchange.com/questions/1505921/schwartz-functions-have-finite-lp-norm

-- Couldn't find this in mathlib.
lemma ENNReal_rpow_ne_top {a : ‚Ñù‚â•0‚àû} {p : ‚Ñù} (hp : 0 < p) (h : a ‚â† ‚ä§) : a ^ p ‚â† ‚ä§ := by
  rw [‚Üê ofReal_toReal_eq_iff] at h
  rw [‚Üê h]
  simp
  intros
  exact hp.le

lemma ENNReal_rpow_lt_top {a : ‚Ñù‚â•0‚àû} {p : ‚Ñù} (hp : 0 < p) (h : a < ‚ä§) : a ^ p < ‚ä§ := by
  rw [lt_top_iff_ne_top] at h ‚ä¢
  exact ENNReal_rpow_ne_top hp h


namespace SchwartzMap

variable {E F : Type*}
variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

variable (ùïú : Type*) [NormedField ùïú] [NormedSpace ùïú F] [SMulCommClass ‚Ñù ùïú F]

/- Exposes alternative form of Schwartz decay condition.

Can be obtained from `one_add_le_sup_seminorm_apply`.
Useful for combining with "Japanese bracket" in `integrable_one_add_norm`.

TODO: Add proof of equivalence of conditions?
-/
lemma decay‚ÇÅ (f : ùì¢(E, F)) :
    ‚àÄ (k n : ‚Ñï), ‚àÉ C, ‚àÄ x, HPow.hPow (1 + ‚Äñx‚Äñ) k * ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ ‚â§ C := by
  intro k n
  have := @one_add_le_sup_seminorm_apply ùïú E F _ _ _ _ _ _ _ ‚ü®k, n‚ü© k n (by simp) (by simp) f
  simp at this
  use HPow.hPow (2 : ‚Ñù) k * Finset.sup (Finset.Iic (k, n)) (fun m => SchwartzMap.seminorm ùïú m.1 m.2) f

/- Re-arranged version of `decay‚ÇÅ`. -/
lemma norm_iteratedFDeriv_le_pow_one_add_norm (f : ùì¢(E, F)) (r : ‚Ñù) :
    ‚àÄ (n : ‚Ñï), ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ (-r) := by
  -- TODO: Better to remove the negative in the power?
  -- Most interesting for non-negative powers.
  intro n
  -- Use any integer `k` such that `r ‚â§ k`.
  generalize hk : ‚åàr‚åâ‚Çä = k
  rcases decay‚ÇÅ ùïú f k n with ‚ü®C, hC‚ü©
  use C
  refine And.intro ?_ ?_
  . specialize hC 0  -- Use any `E`.
    simp at hC
    exact le_trans (norm_nonneg _) hC
  . intro x
    specialize hC x
    have h_pos : 0 < 1 + ‚Äñx‚Äñ := add_pos_of_pos_of_nonneg zero_lt_one (norm_nonneg _)
    rw [Real.rpow_neg h_pos.le]
    rw [mul_comm, inv_mul_eq_div]
    rw [le_div_iff' (Real.rpow_pos_of_pos h_pos _)]
    refine le_trans ?_ hC
    refine mul_le_mul_of_nonneg_right ?_ (norm_nonneg _)
    rw [‚Üê Real.rpow_nat_cast]
    refine Real.rpow_le_rpow_of_exponent_le (by simp) ?_
    simp [‚Üê hk]
    exact Nat.le_ceil _

/- Useful form for proving that derivatives are in `Lp`. -/
lemma pow_norm_iteratedFDeriv_le_pow_one_add_norm (f : ùì¢(E, F)) {p : ‚Ñù} (hp : 0 < p) (q : ‚Ñù) :
    ‚àÄ (n : ‚Ñï), ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ ^ p ‚â§ C * (1 + ‚Äñx‚Äñ) ^ (-q) := by
  -- Seems wild that we can choose arbitrary `q`?
  intro n
  generalize hr : q / p = r
  rcases norm_iteratedFDeriv_le_pow_one_add_norm ùïú f r n with ‚ü®C, ‚ü®hC_nonneg, hC‚ü©‚ü©
  use C ^ p
  have hC_pow : 0 ‚â§ C ^ p := Real.rpow_nonneg_of_nonneg hC_nonneg _
  refine And.intro hC_pow ?_
  intro x
  specialize hC x
  have hq : q = p * r := by rw [‚Üê hr, mul_div, mul_div_cancel_left _ hp.ne']
  rw [hq]
  have hb_pos : 0 < 1 + ‚Äñx‚Äñ
  . exact add_pos_of_pos_of_nonneg zero_lt_one (norm_nonneg _)
  rw [mul_comm p r, ‚Üê neg_mul, Real.rpow_mul hb_pos.le]
  rw [‚Üê Real.mul_rpow hC_nonneg (Real.rpow_nonneg_of_nonneg hb_pos.le _)]
  exact Real.rpow_le_rpow (norm_nonneg _) hC hp.le

/- Simple version of `pow_norm_iteratedFDeriv_le_pow_one_add_norm` with `q = -1`. -/
lemma pow_norm_iteratedFDeriv_le_inv_one_add_norm (f : ùì¢(E, F)) {p : ‚Ñù} (hp : 0 < p) :
    ‚àÄ (n : ‚Ñï), ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚ÄñiteratedFDeriv ‚Ñù n f x‚Äñ ^ p ‚â§ C * (1 + ‚Äñx‚Äñ)‚Åª¬π := by
  have := pow_norm_iteratedFDeriv_le_pow_one_add_norm ùïú f hp 1
  simpa [Real.rpow_neg_one]

-- Rewrite for `norm` (`iteratedFDeriv` with `n = 0`).

/- Convenient form of `pow_norm_iteratedFDeriv_le_pow_one_add_norm`. -/
lemma pow_norm_le_pow_one_add_norm (f : ùì¢(E, F)) {p : ‚Ñù} (hp : 0 < p) (q : ‚Ñù) :
    ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚Äñf x‚Äñ ^ p ‚â§ C * (1 + ‚Äñx‚Äñ) ^ (-q) := by
  have := pow_norm_iteratedFDeriv_le_pow_one_add_norm ùïú f hp q 0
  simpa

/- Schwartz map is bounded by `C_q * (1 + ‚Äñx‚Äñ) ^ (-q)` for all `q`. -/
lemma norm_le_pow_one_add_norm (f : ùì¢(E, F)) (q : ‚Ñù) :
    ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ) ^ (-q) := by
  have := pow_norm_iteratedFDeriv_le_pow_one_add_norm ùïú f zero_lt_one q 0
  simpa

/- Convenient form of `pow_norm_iteratedFDeriv_le_pow_one_add_norm`. -/
lemma pow_norm_le_inv_one_add_norm (f : ùì¢(E, F)) {p : ‚Ñù} (hp : 0 < p) :
    ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚Äñf x‚Äñ ^ p ‚â§ C * (1 + ‚Äñx‚Äñ)‚Åª¬π := by
  have := pow_norm_iteratedFDeriv_le_inv_one_add_norm ùïú f hp 0
  simpa

/- Schwartz map is bounded by `C * (1 + ‚Äñx‚Äñ)‚Åª¬π`. -/
lemma norm_le_inv_one_add_norm (f : ùì¢(E, F)) :
    ‚àÉ C, 0 ‚â§ C ‚àß ‚àÄ x, ‚Äñf x‚Äñ ‚â§ C * (1 + ‚Äñx‚Äñ)‚Åª¬π := by
  have := pow_norm_iteratedFDeriv_le_inv_one_add_norm ùïú f zero_lt_one 0
  simpa


section Integral

variable [MeasureSpace E] [OpensMeasurableSpace E] [SecondCountableTopologyEither E F]
variable [FiniteDimensional ‚Ñù E] [BorelSpace E] [(volume : Measure E).IsAddHaarMeasure]

/- Schwartz maps in `ùì¢(E, F)` are in `Lp` for `p ‚àà (0, ‚àû)` and finite-dimensional `E`.

Only holds for `Lp .. volume` (inherited from `integrable_one_add_norm`).

TODO: Generalize to `Mem‚Ñíp f ‚ä§`?

TODO: Show that Schwartz maps are dense in `Lp`?
Might be achieved by showing that smooth, compact functions are dense in `Lp`.

Could also show that derivatives are in `Lp`, but this is trivial since
the derivative of a Schwartz map is a Schwartz map.
-/
lemma mem_Lp (f : ùì¢(E, F)) (p : NNReal) [hp : Fact (0 < p)] : Mem‚Ñíp f p := by
  -- TODO: Just use `iteratedDeriv_mem_Lp` once generalized to `ùì¢(E, F)`?
  refine And.intro f.continuous.aestronglyMeasurable ?_
  simp [snorm, hp.out.ne', snorm']
  refine ENNReal_rpow_lt_top (inv_pos_of_pos hp.out) ?_
  generalize hr : (FiniteDimensional.finrank ‚Ñù E + 1 : ‚Ñù) = r
  -- Need to get `C` for condition.
  rcases pow_norm_le_pow_one_add_norm ùïú f hp.out r with ‚ü®C, ‚ü®hC_nonneg, hC‚ü©‚ü©
  simp at hC
  suffices : ‚à´‚Åª (x : E), (‚Äñf x‚Äñ‚Çä : ENNReal) ^ (p : ‚Ñù) ‚â§ ‚à´‚Åª (x : E), ENNReal.ofReal (C * (1 + ‚Äñx‚Äñ) ^ (-r))
  . refine lt_of_le_of_lt this ?_
    -- Remove the `C` from the condition.
    simp_rw [ENNReal.ofReal_mul hC_nonneg]
    rw [lintegral_const_mul]
    swap
    . refine Measurable.ennreal_ofReal ?_
      exact Measurable.pow_const (Measurable.const_add measurable_norm _) _
    refine ENNReal.mul_lt_top (by simp) ?_
    -- Use the "Japanese bracket".
    rw [‚Üê lt_top_iff_ne_top]
    refine finite_integral_one_add_norm ?_
    simp [‚Üê hr]
  refine lintegral_mono ?_
  intro x
  -- Get to NNReal.
  simp
  rw [ENNReal.ofReal]
  have hp_coe_pos : 0 < (p : ‚Ñù) := hp.out
  rw [ENNReal.coe_rpow_of_nonneg _ hp_coe_pos.le]
  norm_cast
  -- Get to ‚Ñù.
  rw [‚Üê norm_toNNReal]
  rw [‚Üê Real.toNNReal_rpow_of_nonneg (norm_nonneg _)]
  refine Real.toNNReal_le_toNNReal ?_
  exact hC x

-- Didn't need this to define `toLp`; just use `Mem‚Ñíp.toLp`.
-- Could use `toContinuousMap.toAEEqFun`; it needs `[BorelSpace E]` (and `noncomputable`).
def toAEEqFun (f : ùì¢(E, F)) (Œº : Measure E) : E ‚Üí‚Çò[Œº] F :=
  AEEqFun.mk f.toFun f.continuous.aestronglyMeasurable

lemma coeFn_toAEEqFun (f : ùì¢(E, F)) (Œº : Measure E) : f.toAEEqFun Œº =·µê[Œº] f.toFun :=
  AEEqFun.coeFn_mk _ _

-- TODO: May be better to write this as a continuous linear map, like `ContinuousMap.toLp`?
-- Or use `SchwartzMap.toContinuousMap.toAEEqFun`?
def toLp (p : NNReal) [Fact (0 < p)] (f : ùì¢(E, F)) :
    Lp F p (by volume_tac : Measure E) :=
  Mem‚Ñíp.toLp f.toFun (mem_Lp ùïú f p)

lemma coeFn_toLp {p : NNReal} [Fact (0 < p)] (f : ùì¢(E, F)) : f.toLp ùïú p =·µê[volume] f :=
  Mem‚Ñíp.coeFn_toLp _

-- Use `Mem‚Ñíp f 1` to provide `Integrable`.
-- Cannot use `BoundedContinuousFunction.integrable` as it requires `IsFiniteMeasure Œº`.
lemma integrable {f : ùì¢(E, F)} : Integrable f := by
  have hp : Fact ((0 : ‚Ñù) < 1) := ‚ü®zero_lt_one‚ü©
  refine Integrable.congr (L1.integrable_coeFn (f.toLp ùïú 1)) ?_
  exact coeFn_toLp ùïú f


end Integral  -- [MeasureSpace E] [SecondCountableTopologyEither E F]

-- end Lp  -- [SMulCommClass ‚Ñù ùïú F]

end SchwartzMap
