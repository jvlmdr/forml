import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.Fourier.RiemannLebesgueLemma
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.MeasureTheory.Integral.FundThmCalculus
import Mathlib.MeasureTheory.Integral.IntegralEqImproper

import ForML.HasTemperateGrowth
import ForML.IntegralAgainst
import ForML.SchwartzDeriv
import ForML.SchwartzLp
import ForML.Trigonometric
import ForML.Util

-- https://github.com/leanprover/lean4/issues/2220
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)

open MeasureTheory SchwartzSpace Complex FourierTransform RealInnerProductSpace
open scoped BigOperators Real

attribute [-simp] ofAdd_neg

variable {ùïú ùïú' R D E F G : Type*}


section Continuous

variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F] [NormedSpace ‚ÑÇ F]

/-- Application of `VectorFourier.fourierIntegral_continuous`. -/
lemma Real.fourierIntegral_continuous {f : ‚Ñù ‚Üí F} (hf : Integrable f) :
    Continuous (Real.fourierIntegral f) :=
  VectorFourier.fourierIntegral_continuous Real.continuous_fourierChar (by exact continuous_mul) hf

-- lemma ContDiff.ofReal {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï‚àû} (hf : ContDiff ‚Ñù n f) :
--     ContDiff ‚Ñù n (fun x => (f x : ‚ÑÇ)) :=
--   ofRealClm.contDiff.comp hf

end Continuous


-- section Integral

-- -- variable [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
-- variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
-- variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F] -- [NormedSpace ‚ÑÇ F]
-- -- variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
-- variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]

-- lemma SchwartzMap.integralCLM_eq_L1_integral {f : ùì¢(E, F)} [CompleteSpace F] : integralCLM f = L1.integral f.toL1 := by
--   rw [integralCLM_apply]
--   rw [L1.integral_eq_integral]
--   exact integral_congr_ae (coeFn_toL1 f).symm

-- end Integral


namespace SchwartzMap

section Tendsto

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

-- TODO: Generalize to vector space `E` using cocompact filter?
lemma tendsto_atTop_zero_real (f : ùì¢(‚Ñù, F)) : Filter.Tendsto (fun x => f x) Filter.atTop (nhds 0) := by
  rw [tendsto_zero_iff_norm_tendsto_zero]
  rcases f.decay‚ÇÅ 1 0 with ‚ü®C, hC‚ü©
  simp at hC
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le (h := fun x => C * (1 + |x|)‚Åª¬π) tendsto_const_nhds ?_ ?_ ?_
  . rw [‚Üê mul_zero C]
    refine Filter.Tendsto.const_mul C ?_
    refine Filter.Tendsto.inv_tendsto_atTop ?_
    refine Filter.tendsto_atTop_add_const_left _ 1 ?_
    exact Filter.tendsto_abs_atTop_atTop
  . intro x
    simp
  . intro x
    simp
    rw [‚Üê div_eq_mul_inv]
    rw [le_div_iff (lt_of_lt_of_le zero_lt_one (by simp))]
    rw [mul_comm]
    exact hC x

/-- Maps `f` to `x ‚Ü¶ f (-x)`. -/
def comp_neg : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) := compCLM ‚Ñù (Function.hasTemperateGrowth_clm (-ContinuousLinearMap.id ‚Ñù E)) ‚ü®1, 1, by simp‚ü©

lemma comp_neg_apply {f : ùì¢(E, F)} {x : E} : comp_neg f x = f (-x) := rfl

end Tendsto


section Fourier

variable [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
variable [NormedAddCommGroup E] [hE : InnerProductSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]  -- Note: `NormedSpace ‚Ñù f` interferes through `complexToReal`
variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]

variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]
variable [CompleteSpace F]

instance : NormedSpace ‚Ñù E := hE.toNormedSpace  -- Type system can't find this?

-- Prove that the Fourier transform of a Schwartz function is a Schwartz function
-- in order to define the Fourier transform of a tempered distribution.
-- https://math.mit.edu/~rbm/iml/Chapter1.pdf
-- https://math.stackexchange.com/questions/445089/fourier-transform-of-a-schwartz-space-function-and-norm
-- https://sites.math.washington.edu/~hart/m556/Lecture25.pdf

-- We already have that the Fourier transform of a Schwartz function is continuous
-- using `VectorFourier.fourierIntegral_continuous` and that Schwartz functions are integrable.

-- Next step is to obtain the derivative of the Fourier transform
-- and the Fourier transform of the derivative.

scoped[FourierTransform] notation "ùìï·µ•" => VectorFourier.fourierIntegral Real.fourierChar volume (inner‚Çõ‚Çó ‚Ñù)

lemma VectorFourier.realInnerVolume_apply {f : E ‚Üí F} {Œæ : E} :
    ùìï·µ• (fun x => f x) Œæ = ‚à´ x, Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x := rfl

/-- The real Fourier integrand as a Schwartz function in one variable. -/
noncomputable def realFourierIntegrand (Œæ : ‚Ñù) : ùì¢(‚Ñù, F) ‚ÜíL[‚Ñù] ùì¢(‚Ñù, F) :=
  hasTemperateGrowth_smul (Real.hasTemperateGrowth_fourierChar_neg_mul_const Œæ)

lemma realFourierIntegrand_apply {f : ùì¢(‚Ñù, F)} {Œæ x : ‚Ñù} :
    realFourierIntegrand Œæ f x = Real.fourierChar[-(x * Œæ)] ‚Ä¢ f x := rfl

lemma integral_realFourierIntegrand {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} :
    ùìï f Œæ = ‚à´ x, realFourierIntegrand Œæ f x := rfl

/-- The vector Fourier integrand as a Schwartz function in one variable. -/
noncomputable def vectorFourierIntegrand (Œæ : E) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) :=
  hasTemperateGrowth_smul (Real.hasTemperateGrowth_inner_const Œæ).neg.realFourierChar

lemma vectorFourierIntegrand_apply {f : ùì¢(E, F)} {Œæ x : E} :
    vectorFourierIntegrand Œæ f x = Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x := rfl

lemma vectorFourierIntegrand_smul_apply {f : ùì¢(E, F)} {Œæ x : E} {c : ‚ÑÇ} :
    c ‚Ä¢ vectorFourierIntegrand Œæ f x = Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ (c ‚Ä¢ f) x := by
  simp
  rw [smul_comm]
  rfl

lemma integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    ùìï·µ• f Œæ = ‚à´ x, vectorFourierIntegrand Œæ f x := rfl

lemma contDiff_vectorFourierIntegrand_prod {f : ùì¢(E, F)} :
    ContDiff ‚Ñù ‚ä§ fun m : (E √ó E) => vectorFourierIntegrand m.2 f m.1 := by
  -- Use "of_tower" variant in `ForML.Util`.
  exact ContDiff.smul_of_tower contDiff_inner.neg.realFourierChar (f.smooth'.comp contDiff_fst)

lemma contDiff_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    ContDiff ‚Ñù ‚ä§ (fun Œæ => vectorFourierIntegrand Œæ f x) := by
  change ContDiff ‚Ñù ‚ä§ ((fun p : E √ó E => vectorFourierIntegrand p.2 f p.1) ‚àò (fun Œæ => (x, Œæ)))
  exact ContDiff.comp contDiff_vectorFourierIntegrand_prod (contDiff_prod_mk_right x)

lemma differentiable_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    Differentiable ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) :=
  contDiff_vectorFourierIntegrand.differentiable le_top

lemma continuous_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    Continuous (fun Œæ => vectorFourierIntegrand Œæ f x) :=
  contDiff_vectorFourierIntegrand.continuous

/--
The Fourier integrand commutes with pointwise smul by the inner product map.

TODO: There's likely a more general version of this lemma for `HasTemperateGrowth` functions
(the Fourier integrand commutes with a pointwise smul action).
-/
lemma innerSL_smul_vectorFourierIntegrand_comm {f : ùì¢(E, F)} {Œæ : E} :
    innerSL_smul (vectorFourierIntegrand Œæ f) =
    vectorFourierIntegrand Œæ (innerSL_smul f) := by
  ext x m
  simp [innerSL_smul_apply, vectorFourierIntegrand_apply]
  rw [smul_comm]

-- Give hint to find instance for `(c : ‚ÑÇ) ‚Ä¢ f` in `fderivCLM_vectorFourierIntegrand`.
-- noncomputable instance : Module ‚ÑÇ (ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, E ‚ÜíL[‚Ñù] F)) := ContinuousLinearMap.module
instance {D E F G : Type*}
    [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
    [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
    [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
    [NormedAddCommGroup G] [NormedSpace ‚Ñù G] [NormedSpace ‚ÑÇ G] :
    Module ‚ÑÇ (ùì¢(D, E) ‚ÜíL[‚Ñù] ùì¢(F, G)) := ContinuousLinearMap.module

/--
The Fr√©chet derivative of `vectorFourierIntegrand` with respect to `Œæ`; Schwartz in `x`, linear in `dŒæ`.

The derivative with respect to `x` can be obtained using `SchwartzMap.fderivCLM`.
-/
noncomputable def fderivCLM_vectorFourierIntegrand (Œæ : E) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, E ‚ÜíL[‚Ñù] F) :=
  -((2 * œÄ * I) ‚Ä¢ (vectorFourierIntegrand Œæ).comp (innerSL_smul (F := F)))

lemma fderivCLM_vectorFourierIntegrand_apply {f : ùì¢(E, F)} {x Œæ dŒæ : E} :
    fderivCLM_vectorFourierIntegrand Œæ f x dŒæ =
    -((2 * œÄ * I * ‚ü™x, dŒæ‚ü´) ‚Ä¢ vectorFourierIntegrand Œæ f x) := by
  simp [fderivCLM_vectorFourierIntegrand]
  rw [neg_apply, smul_apply]  -- TODO: Can't use `simp` or `simp only` instead of `rw`?
  simp
  rw [‚Üê innerSL_smul_vectorFourierIntegrand_comm]
  rw [innerSL_smul_apply]
  rw [smul_comm]
  rw [‚Üê smul_assoc]
  simp
  ring_nf

/-- The Fr√©chet derivative of `vectorFourierIntegrand` with respect to `Œæ`. -/
lemma fderiv_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ x : E} :
    fderiv ‚Ñù (fun Œæ' => vectorFourierIntegrand Œæ' f x) Œæ =
    fderivCLM_vectorFourierIntegrand Œæ f x := by
  change fderiv ‚Ñù ((fun u : ‚Ñù => Real.fourierChar[u] ‚Ä¢ f x) ‚àò fun Œæ' : E => -‚ü™x, Œæ'‚ü´) Œæ = _
  refine ContinuousLinearMap.ext ?_
  intro dŒæ
  rw [fderiv.comp]
  rotate_left
  . refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact ContDiff.smul_of_tower Real.contDiff_fourierChar contDiff_const
  . refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact (ContDiff.inner ‚Ñù contDiff_const contDiff_id).neg
  simp
  rw [fderiv_inner_apply ‚Ñù (differentiableAt_const x) differentiableAt_id']
  simp
  rw [fderiv_smul_const]
  swap
  . -- TODO: Avoid repetition?
    refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact Real.contDiff_fourierChar
  simp
  rw [Real.fderiv_fourierChar]
  simp
  rw [fderivCLM_vectorFourierIntegrand_apply, vectorFourierIntegrand_apply]
  simp
  rw [smul_comm]
  simp [‚Üê smul_assoc]
  ring_nf

-- TODO: More idiomatic to define `HasFDerivAt` before `fderiv`?
lemma hasFDerivAt_vectorFourierIntegrand {f : ùì¢(E, F)} {x Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ : E => vectorFourierIntegrand Œæ f x) (fderivCLM_vectorFourierIntegrand Œæ‚ÇÄ f x) Œæ‚ÇÄ :=
  HasFDerivAt.congr_fderiv
    differentiable_vectorFourierIntegrand.differentiableAt.hasFDerivAt
    fderiv_vectorFourierIntegrand

-- Need to provide assistance?
-- noncomputable instance : SeminormedAddCommGroup (E ‚ÜíL[‚Ñù] ‚ÑÇ) := ContinuousLinearMap.toSeminormedAddCommGroup
-- noncomputable instance : NormedSpace ‚Ñù (E ‚ÜíL[‚Ñù] ‚ÑÇ) := ContinuousLinearMap.toNormedSpace

/-- Uses `‚Äñcexp (_ ‚Ä¢ I)‚Äñ = 1` to obtain norm independent of `Œæ`. -/
lemma norm_fderivCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ x : E} :
    ‚ÄñfderivCLM_vectorFourierIntegrand Œæ f x‚Äñ = 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ := by
    -- ‚Äñfderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ‚Äñ = 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ := by
  suffices : ‚ÄñfderivCLM_vectorFourierIntegrand Œæ f x‚Äñ = ‚ÄñinnerSL_smul ((2 * œÄ) ‚Ä¢ f) x‚Äñ
  . simpa [norm_smul, _root_.abs_of_nonneg Real.pi_pos.le] using this
  simp only [ContinuousLinearMap.norm_def]
  simp only [fderivCLM_vectorFourierIntegrand_apply, vectorFourierIntegrand_apply, innerSL_smul_apply]
  simp
  congr
  ext r
  simp
  intro _
  refine forall_congr' ?_
  intro u
  simp [norm_smul]
  ring_nf

-- Type system needs help?
instance {Œ± : Type*} [TopologicalSpace Œ±] : SecondCountableTopologyEither E Œ± := secondCountableTopologyEither_of_left E Œ±

/-- The derivative of the Fourier integral. -/
lemma hasFDerivAt_integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ => ‚à´ x, vectorFourierIntegrand Œæ f x)
      (‚à´ x, fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ‚ÇÄ) Œæ‚ÇÄ := by
  refine hasFDerivAt_integral_of_dominated_of_fderiv_le
      (F' := fun Œæ x => fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ)
      -- (bound := fun x => 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ)
      zero_lt_one ?_ (vectorFourierIntegrand Œæ‚ÇÄ f).integrable ?_ ?_
      ((innerSL_smul f).integrable.norm.const_mul (2 * œÄ)) ?_
  . refine Filter.eventually_of_forall ?_
    intro Œæ
    exact Continuous.aestronglyMeasurable (SchwartzMap.continuous _)
  . refine Continuous.aestronglyMeasurable ?_
    simp
    exact Continuous.fderiv contDiff_vectorFourierIntegrand_prod continuous_const le_top
  . refine Filter.eventually_of_forall ?_
    intro x Œæ _
    simp
    rw [fderiv_vectorFourierIntegrand]
    rw [norm_fderivCLM_vectorFourierIntegrand]
  . refine Filter.eventually_of_forall ?_
    intro x Œæ _
    simp
    exact differentiable_vectorFourierIntegrand.differentiableAt.hasFDerivAt

lemma fderiv_integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => ‚à´ x, vectorFourierIntegrand Œæ f x) Œæ =
    ‚à´ x, fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ :=
  hasFDerivAt_integral_vectorFourierIntegrand.fderiv

/-- Leibniz integral rule for Fourier integrand in terms of CLMs. -/
lemma hasFDerivAt_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f))
      (integralCLM (fderivCLM_vectorFourierIntegrand Œæ‚ÇÄ f)) Œæ‚ÇÄ := by
  simp_rw [integralCLM_apply]
  simp_rw [‚Üê fderiv_vectorFourierIntegrand]
  exact hasFDerivAt_integral_vectorFourierIntegrand

lemma fderiv_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ =
    integralCLM (fderivCLM_vectorFourierIntegrand Œæ f) :=
  hasFDerivAt_integralCLM_vectorFourierIntegrand.fderiv

lemma fderiv_integralCLM_eq_integralCLM_innerSL_smul {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ =
    -((2 * œÄ * I) ‚Ä¢ integralCLM ((vectorFourierIntegrand Œæ) (innerSL_smul f))) := by
  rw [fderiv_integralCLM_vectorFourierIntegrand]
  rw [fderivCLM_vectorFourierIntegrand]
  simp [integralCLM_neg_apply, integralCLM_smul_apply]

lemma differentiable_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} :
    Differentiable ‚Ñù fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) :=
  fun _ => hasFDerivAt_integralCLM_vectorFourierIntegrand.differentiableAt

lemma continuous_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} :
    Continuous fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) :=
  -- TODO: Is this an upside-down way to prove this?
  -- Could use `integralCLM.continuous.comp`; show that `hasTemperateGrowth_smul` is continuous with Schwartz topology?
  differentiable_integralCLM_vectorFourierIntegrand.continuous

-- `d[exp(-2 œÄ I ‚ü™x, Œæ‚ü´)]`
-- `d[-2 œÄ I ‚ü™x, Œæ‚ü´] exp(-(2 œÄ I ‚ü™x, Œæ‚ü´))`
-- `-2 œÄ I ‚ü™dx, Œæ‚ü´ exp(-(2 œÄ I ‚ü™x, Œæ‚ü´))`

lemma fderiv_fourierChar_inner {x Œæ dŒæ : E} :
    fderiv ‚Ñù (fun Œæ => Real.fourierChar[-‚ü™x, Œæ‚ü´]) Œæ dŒæ =
    -((2 * œÄ * I) * ‚ü™x, dŒæ‚ü´ * Real.fourierChar[-‚ü™x, Œæ‚ü´]) := by
  change fderiv ‚Ñù ((fun u : ‚Ñù => Real.fourierChar[u]) ‚àò (fun Œæ : E => -‚ü™x, Œæ‚ü´)) Œæ dŒæ = _
  rw [fderiv.comp]
  rotate_left
  . exact (Real.contDiff_fourierChar.differentiable le_top).differentiableAt
  . exact (DifferentiableAt.inner ‚Ñù (differentiableAt_const x) differentiableAt_id).neg
  rw [ContinuousLinearMap.comp_apply]
  simp
  rw [fderiv_inner_apply ‚Ñù (differentiableAt_const x) differentiableAt_id']
  simp [Real.fderiv_fourierChar]
  ring_nf

-- `d^n[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= -2 œÄ I ‚ü™x, dŒæ_0‚ü´ d^(n-1)[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= (-2 œÄ I)^2 ‚ü™x, dŒæ 0‚ü´ ‚ü™x, dŒæ 1‚ü´ d^(n-2)[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= (-2 œÄ I)^n ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´)`

-- `‚Äñd^n[exp(-2 œÄ I ‚ü™x, Œæ‚ü´)] ‚Ä¢ f x‚Äñ`
-- `= ‚Äñ(-2 œÄ I)^n ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x‚Äñ`
-- `= (2 œÄ)^n ‚Äñ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x‚Äñ`

-- `‚Äñ ‚à´ x, exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x ‚Äñ`
-- ...

-- Is this useful for proving bound?
lemma norm_integral_vectorFourierIntegrand_le {f : ùì¢(E, F)} {Œæ : E} :
    ‚Äñ‚à´ x, vectorFourierIntegrand Œæ f x‚Äñ ‚â§ ‚à´ x, ‚Äñf x‚Äñ := by
  refine norm_integral_le_of_norm_le f.integrable.norm ?_
  refine Filter.eventually_of_forall ?_
  intro x
  simp [vectorFourierIntegrand_apply, norm_smul]

lemma norm_integralCLM_vectorFourierIntegrand_le {f : ùì¢(E, F)} {Œæ : E} :
    ‚ÄñintegralCLM (vectorFourierIntegrand Œæ f)‚Äñ ‚â§ ‚à´ x, ‚Äñf x‚Äñ := by
  rw [integralCLM_apply]
  exact norm_integral_vectorFourierIntegrand_le

/-- Integration by parts for the Fourier integral of the derivative of a Schwartz function on ‚Ñù. -/
lemma intervalIntegral_integrand_deriv_sub_smul_integrand {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} {a b : ‚Ñù} :
    (‚à´ (x : ‚Ñù) in a..b, realFourierIntegrand Œæ (derivCLM ‚Ñù f) x - ((2 * œÄ * I * Œæ) ‚Ä¢ realFourierIntegrand Œæ f x)) =
      realFourierIntegrand Œæ f b - realFourierIntegrand Œæ f a := by
  have := intervalIntegral.integral_deriv_smul_eq_sub (a := a) (b := b)
    (u := (fun x => Real.fourierChar[-(x * Œæ)]))
    (v := (fun x => f x))
    (u' := (fun x => (-Œæ) ‚Ä¢ (2 * œÄ * I * Real.fourierChar[-(x * Œæ)])))
    (v' := (fun x => deriv f x))
    (fun x _ => HasDerivAt.comp_of_tower x Real.hasDerivAt_fourierChar (hasDerivAt_mul_const Œæ).neg)
    (fun x _ => f.differentiableAt.hasDerivAt) ?_ ?_
  rotate_left
  . refine Continuous.continuousOn ?_
    refine ((continuous_const).mul ?_).const_smul (-Œæ)
    exact (continuous_mul_right Œæ).neg.realFourierChar
  . refine Continuous.continuousOn ?_
    simp_rw [‚Üê derivCLM_apply ‚Ñù]
    exact (derivCLM ‚Ñù f).continuous
  simp at this
  conv => rhs; simp [realFourierIntegrand_apply]
  rw [‚Üê this]
  clear this
  congr
  funext x
  simp [realFourierIntegrand_apply, derivCLM_apply]
  simp [smul_smul, neg_add_eq_sub]
  ring_nf

-- TODO: Should be possible to obtain `Tendsto f atTop (nhds 0)` from `Integrable f` and `Continuous f`?
-- For now, prove it for the specific case that we have instead.

/-- The Fourier integral of the derivative of a Schwartz function on ‚Ñù. -/
lemma realFourierIntegral_deriv {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} :
    ùìï (fun x => deriv f x) Œæ = (2 * œÄ * I * Œæ) ‚Ä¢ ùìï (fun x => f x) Œæ := by
  -- Replace `fourierChar[_]` with `realFourierIntegrand`; easy to show integrable and differentiable.
  change ‚à´ x, realFourierIntegrand Œæ (derivCLM ‚Ñù f) x = (2 * œÄ * I * Œæ) ‚Ä¢ ‚à´ x : ‚Ñù, realFourierIntegrand Œæ f x
  rw [‚Üê sub_eq_zero]
  rw [‚Üê integral_smul]
  rw [‚Üê integral_sub (integrable _)]
  swap
  . exact (integrable _).smul _  -- This can't be put inside the rewrite?

  have h_cover : AECover volume Filter.atTop (fun i => Set.Ioc (-i) i : ‚Ñï ‚Üí Set ‚Ñù)
  . refine aecover_Ioc ?_ ?_ <;> simp [Filter.tendsto_neg_atBot_iff, tendsto_nat_cast_atTop_atTop]

  refine AECover.integral_eq_of_tendsto h_cover _ ?_ ?_
  . refine Integrable.sub ?_ ?_
    . have := integrable (realFourierIntegrand Œæ (derivCLM ‚Ñù f))
      simp only [realFourierIntegrand_apply, derivCLM_apply] at this
      exact this
    . have := integrable ((2 * œÄ * I * Œæ) ‚Ä¢ (realFourierIntegrand Œæ f))
      simp only [smul_apply, smul_eq_mul, realFourierIntegrand_apply] at this
      exact this
  simp_rw [‚Üê intervalIntegral.integral_of_le (neg_le_self_iff.mpr (Nat.cast_nonneg _))]
  simp_rw [intervalIntegral_integrand_deriv_sub_smul_integrand]

  rw [‚Üê sub_zero 0]
  refine Filter.Tendsto.sub ?_ ?_
  . refine Filter.Tendsto.comp ?_ tendsto_nat_cast_atTop_atTop
    exact tendsto_atTop_zero_real (realFourierIntegrand Œæ f)
  . change Filter.Tendsto ((fun x => realFourierIntegrand Œæ f (-x)) ‚àò (fun n => n : ‚Ñï ‚Üí ‚Ñù)) Filter.atTop (nhds 0)
    refine Filter.Tendsto.comp ?_ tendsto_nat_cast_atTop_atTop
    simp_rw [‚Üê comp_neg_apply]
    exact tendsto_atTop_zero_real (comp_neg (realFourierIntegrand Œæ f))


section Induction

universe u
variable {E F : Type u}  -- Ensure that `E ‚ÜíL[‚Ñù] F` is in the same universe as `F`.

variable [NormedAddCommGroup E] [hE : InnerProductSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
variable [mE : MeasureSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E] [mE.volume.IsAddHaarMeasure]
variable [CompleteSpace F]

/-- The Fourier integral of a Schwartz map is smooth. -/
theorem contDiff_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} : ContDiff ‚Ñù ‚ä§ fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) := by
  rw [contDiff_top]
  intro n
  induction n generalizing F with
  | zero =>
    simp
    exact continuous_integralCLM_vectorFourierIntegrand
  | succ n h_ind =>
    rw [contDiff_succ_iff_fderiv]
    refine ‚ü®differentiable_integralCLM_vectorFourierIntegrand, ?_‚ü©
    simp_rw [fderiv_integralCLM_eq_integralCLM_innerSL_smul]
    refine ContDiff.neg ?_
    refine ContDiff.const_smul (2 * œÄ * I : ‚ÑÇ) ?_
    -- Need `E ‚ÜíL[‚Ñù] F` to be in same universe as `F` to apply induction.
    exact h_ind

/-- The Fourier integral of a Schwartz map is smooth. -/
theorem contDiff_fourierIntegral {f : ùì¢(E, F)} : ContDiff ‚Ñù ‚ä§ fun Œæ => ‚à´ x, Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x := by
  simp_rw [‚Üê vectorFourierIntegrand_apply]
  simp_rw [‚Üê integralCLM_apply]
  exact contDiff_integralCLM_vectorFourierIntegrand

lemma norm_iteratedFDeriv_integralCLM_fourierIntegrand_le {n : ‚Ñï} {f : ùì¢(E, F)} :
    ‚ÄñiteratedFDeriv ‚Ñù n (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ‚Äñ ‚â§ (2 * œÄ) ^ n * ‚à´ x, ‚Äñx‚Äñ ^ n * ‚Äñf x‚Äñ := by
  induction n generalizing F with
  | zero =>
    simp
    exact norm_integralCLM_vectorFourierIntegrand_le
  | succ n h_ind =>
    simp [iteratedFDeriv_succ_eq_comp_right]
    simp_rw [fderiv_integralCLM_eq_integralCLM_innerSL_smul]
    rw [iteratedFDeriv_neg_apply']
    rw [iteratedFDeriv_const_smul_apply']
    swap
    . exact contDiff_integralCLM_vectorFourierIntegrand.of_le le_top
    -- simp
    -- rw [norm_neg]  -- Assistance needed?
    rw [norm_neg (E := ContinuousMultilinearMap _ _ _)]
    rw [norm_smul]
    simp
    rw [abs_of_pos Real.pi_pos]
    rw [pow_succ]
    rw [mul_assoc (2 * œÄ)]
    refine mul_le_mul_of_nonneg_left ?_ (by simp [Real.pi_pos.le])
    specialize h_ind (f := innerSL_smul f)
    refine le_trans h_ind ?_
    refine mul_le_mul_of_nonneg_left ?_ (by simp [Real.pi_pos.le])
    refine integral_mono integrable_norm_pow_mul_norm integrable_norm_pow_mul_norm ?_
    intro x
    simp
    rw [pow_succ']
    rw [mul_assoc]
    refine mul_le_mul_of_nonneg_left ?_ (by simp)
    rw [ContinuousLinearMap.op_norm_le_iff]
    swap
    . refine mul_nonneg ?_ ?_ <;> simp
    intro y
    rw [innerSL_smul_apply]
    simp_rw [norm_smul]
    repeat rw [mul_comm _ ‚Äñf x‚Äñ]
    rw [mul_assoc]
    refine mul_le_mul_of_nonneg_left ?_ (by simp)
    exact norm_inner_le_norm x y

/-- The Fourier integral of a Schwartz function as a ContinuousLinearMap. -/
noncomputable def vectorFourierIntegralCLM {r : ‚Ñï} [hr : Fact (FiniteDimensional.finrank ‚Ñù E < r)] : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) :=
  mkCLM (fun f Œæ => ‚à´ x, Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x)
    (fun œÜ Œ∏ Œæ => by
      simp [‚Üê vectorFourierIntegrand_apply]
      rw [integral_add (integrable _) (integrable _)])
    (fun c œÜ Œæ => by
      simp [smul_comm _ c]
      rw [integral_smul])
    (fun œÜ => contDiff_fourierIntegral)
    (fun m => by
      simp [‚Üê vectorFourierIntegrand_apply, ‚Üê integralCLM_apply]
      -- simp_rw [integralCLM_eq_L1_integral]
      have k' := 5
      have n' := 7
      have C' := œÄ
      use Finset.Iic (k', n')
      use C'
      refine ‚ü®sorry, ?_‚ü©
      intro œÜ Œæ
      have := tendsto_integral_exp_inner_smul_cocompact œÜ
      -- Have that the integral tends to zero at infinity and is ContDiff.
      -- However, we still need to show that it decays faster than polynomial.
      -- Need to use the fact that the Fourier transform of the derivative has a 1/Œæ^n term?
      have hœÜ := œÜ.decay'
      rcases m with ‚ü®k, n‚ü©
      simp
      refine le_trans (mul_le_mul_of_nonneg_left norm_iteratedFDeriv_integralCLM_fourierIntegrand_le (by simp)) ?_
      sorry)

end Induction
end Fourier
end SchwartzMap  -- namespace
