import Mathlib.Analysis.Calculus.ParametricIntegral
import Mathlib.Analysis.Distribution.SchwartzSpace
import Mathlib.Analysis.Fourier.FourierTransform
import Mathlib.Analysis.Fourier.RiemannLebesgueLemma
import Mathlib.Analysis.InnerProductSpace.Calculus
import Mathlib.Analysis.InnerProductSpace.l2Space
import Mathlib.MeasureTheory.Integral.Bochner
import Mathlib.MeasureTheory.Integral.FundThmCalculus
import Mathlib.MeasureTheory.Integral.IntegralEqImproper
import Mathlib.MeasureTheory.Measure.Haar.InnerProductSpace

import ForML.HasTemperateGrowth
import ForML.IndexDerivBasic
import ForML.IndexIntegral
import ForML.IntegralAgainst
import ForML.SchwartzDeriv
import ForML.SchwartzEquiv
import ForML.SchwartzLp
import ForML.Trigonometric
import ForML.Util

-- https://github.com/leanprover/lean4/issues/2220
local macro_rules | `($x ^ $y) => `(HPow.hPow $x $y)

open MeasureTheory SchwartzSpace Complex FourierTransform RealInnerProductSpace
open scoped BigOperators Real

attribute [-simp] ofAdd_neg

section NoTypeInduction

variable {Œπ ùïú ùïú' R : Type*} {M : Œπ ‚Üí Type*} {D E F G : Type*}

section Continuous

variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]

/-- Real version of `VectorFourier.fourierIntegral_continuous`. -/
lemma Real.fourierIntegral_continuous {f : ‚Ñù ‚Üí F} (hf : Integrable f) :
    Continuous (Real.fourierIntegral f) :=
  VectorFourier.fourierIntegral_continuous Real.continuous_fourierChar (by exact continuous_mul) hf

-- lemma ContDiff.ofReal {f : ‚Ñù ‚Üí ‚Ñù} {n : ‚Ñï‚àû} (hf : ContDiff ‚Ñù n f) :
--     ContDiff ‚Ñù n (fun x => (f x : ‚ÑÇ)) :=
--   ofRealClm.contDiff.comp hf

end Continuous


section VectorDef

variable [Fintype Œπ]
variable [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
variable [MeasurableSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E]
noncomputable instance mE : MeasureSpace E := measureSpaceOfInnerProductSpace  -- Might not be required?
variable [CompleteSpace F]

/-- Definition of l2 inner product for pi type. -/
noncomputable def l2inner‚Çõ‚Çó (ùïú : Type*) [IsROrC ùïú] {Œπ : Type*} [Fintype Œπ] :
    (Œπ ‚Üí ùïú) ‚Üí‚Çó‚ãÜ[ùïú] (Œπ ‚Üí ùïú) ‚Üí‚Çó[ùïú] ùïú := inner‚Çõ‚Çó ùïú (E := EuclideanSpace ùïú Œπ)

lemma l2inner‚Çõ‚Çó_apply {ùïú : Type*} [IsROrC ùïú] {Œπ : Type*} [Fintype Œπ] {x y : Œπ ‚Üí ùïú} :
    l2inner‚Çõ‚Çó ùïú x y = ‚àë i, inner (x i) (y i) := rfl

-- noncomputable def RealVectorFourier.fourierIntegral
--     (f : EuclideanSpace ‚Ñù Œπ ‚Üí F) (Œæ : EuclideanSpace ‚Ñù Œπ) : F :=
--   VectorFourier.fourierIntegral Real.fourierChar volume (inner‚Çõ‚Çó ‚Ñù (E := EuclideanSpace ‚Ñù Œπ)) f Œæ

-- /-- Definition of Fourier transform for finite-dimensional real vectors as Euclidean space. -/
-- noncomputable def RealVectorFourier.fourierIntegral (f : (Œπ ‚Üí ‚Ñù) ‚Üí F) (Œæ : Œπ ‚Üí ‚Ñù) : F :=
--   VectorFourier.fourierIntegral Real.fourierChar volume l2inner‚Çõ‚Çó f Œæ

-- /-- Notation for Fourier transform for finite-dimensional real vectors as Euclidean space. -/
-- scoped[FourierTransform] notation "ùìï‚Çô" => RealVectorFourier.fourierIntegral

-- lemma RealVectorFourier.fourierIntegral_apply {f : (Œπ ‚Üí ‚Ñù) ‚Üí F} {Œæ : Œπ ‚Üí ‚Ñù} :
--     -- ùìï‚Çô f Œæ = ‚à´ x, Real.fourierChar[-‚ü™(x : EuclideanSpace ‚Ñù Œπ), Œæ‚ü´] ‚Ä¢ f x := by
--     ùìï‚Çô f Œæ = ‚à´ x : Œπ ‚Üí ‚Ñù, Real.fourierChar[-‚àë i, x i * Œæ i] ‚Ä¢ f x := by
--   rw [RealVectorFourier.fourierIntegral]
--   rw [VectorFourier.fourierIntegral]
--   change ‚à´ (x : EuclideanSpace ‚Ñù Œπ), Real.fourierChar (Multiplicative.ofAdd (-inner‚Çõ‚Çó ‚Ñù x Œæ)) ‚Ä¢ f x = _
--   change _ = ‚à´ (x : Œπ ‚Üí ‚Ñù), Real.fourierChar (Multiplicative.ofAdd _) ‚Ä¢ f x
--   rw [‚Üê MeasurePreserving.integral_comp' (EuclideanSpace.volume_preserving_measurableEquiv Œπ)]
--   rfl

/-- Notation for Fourier transform for real `InnerProductSpace`. -/
scoped[FourierTransform] notation "ùìï·µ•" => VectorFourier.fourierIntegral Real.fourierChar volume (inner‚Çõ‚Çó ‚Ñù)
-- scoped[FourierTransform] notation "ùìï·µ•[" V "]" => VectorFourier.fourierIntegral Real.fourierChar (volume : Measure V) (inner‚Çõ‚Çó ‚Ñù)

/--
Notation for Fourier transform for real vectors using l2 inner product.
Useful for differentiating or integrating wrt one coordinate.
-/
scoped[FourierTransform] notation "ùìï‚Çô" => VectorFourier.fourierIntegral Real.fourierChar volume (l2inner‚Çõ‚Çó ‚Ñù)

namespace RealVectorFourier

lemma fourierIntegral_l2inner_apply {f : (Œπ ‚Üí ‚Ñù) ‚Üí F} {Œæ : Œπ ‚Üí ‚Ñù} :
    ùìï‚Çô f Œæ = ‚à´ x, Real.fourierChar[-‚àë i, x i * Œæ i] ‚Ä¢ f x := rfl

lemma fourierIntegral_euclidean_eq_fourierIntegral_l2inner {f : EuclideanSpace ‚Ñù Œπ ‚Üí F} {Œæ : EuclideanSpace ‚Ñù Œπ} :
    ùìï·µ• f Œæ = ùìï‚Çô f Œæ := by
  rw [VectorFourier.fourierIntegral]
  rw [‚Üê MeasurePreserving.integral_comp' (EuclideanSpace.volume_preserving_measurableEquiv Œπ).symm]
  rfl

lemma fourierIntegral_l2inner_eq_fourierIntegral_euclidean {f : (Œπ ‚Üí ‚Ñù) ‚Üí F} {Œæ : Œπ ‚Üí ‚Ñù} :
    ùìï‚Çô f Œæ = ùìï·µ• (f ‚àò ‚áë(EuclideanSpace.equiv Œπ ‚Ñù)) Œæ := by
  rw [VectorFourier.fourierIntegral]
  rw [‚Üê MeasurePreserving.integral_comp' (EuclideanSpace.volume_preserving_measurableEquiv Œπ)]
  rfl

lemma fourierIntegral_eq_fourierIntegral_euclidean_ofOrthonormalBasis (v : OrthonormalBasis Œπ ‚Ñù E) {f : E ‚Üí F} {Œæ : E} :
    ùìï·µ• f Œæ = ùìï·µ• (f ‚àò ‚áëv.repr.symm) (v.repr Œæ) := by
  rw [VectorFourier.fourierIntegral]
  rw [VectorFourier.fourierIntegral]
  rw [‚Üê MeasurePreserving.integral_comp' (v.measurePreserving_measurableEquiv)]
  conv =>
    rhs; arg 2; intro x
    change Real.fourierChar[-inner‚Çõ‚Çó ‚Ñù (v.repr x) (v.repr Œæ)] ‚Ä¢ f (v.repr.symm (v.repr x))
    simp

lemma fourierIntegral_eq_fourierIntegral_euclidean_stdOrthonormalBasis {f : E ‚Üí F} {Œæ : E} :
    ùìï·µ• f Œæ = ùìï·µ• (f ‚àò ‚áë(stdOrthonormalBasis ‚Ñù E).repr.symm) ((stdOrthonormalBasis ‚Ñù E).repr Œæ) :=
  fourierIntegral_eq_fourierIntegral_euclidean_ofOrthonormalBasis (stdOrthonormalBasis ‚Ñù E)

lemma fourierIntegral_eq_fourierIntegral_l2inner_ofOrthonormalBasis (v : OrthonormalBasis Œπ ‚Ñù E) {f : E ‚Üí F} {Œæ : E} :
    ùìï·µ• f Œæ = ùìï‚Çô (f ‚àò ‚áëv.repr.symm) (v.repr Œæ) := by
  rw [fourierIntegral_eq_fourierIntegral_euclidean_ofOrthonormalBasis v]
  rw [fourierIntegral_euclidean_eq_fourierIntegral_l2inner]

lemma fourierIntegral_eq_fourierIntegral_l2inner_stdOrthonormalBasis {f : E ‚Üí F} {Œæ : E} :
    ùìï·µ• f Œæ = ùìï‚Çô (f ‚àò ‚áë(stdOrthonormalBasis ‚Ñù E).repr.symm) ((stdOrthonormalBasis ‚Ñù E).repr Œæ) :=
  fourierIntegral_eq_fourierIntegral_l2inner_ofOrthonormalBasis (stdOrthonormalBasis ‚Ñù E)

end RealVectorFourier  -- namespace

end VectorDef


section Tendsto

variable [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚Ñù F]

namespace SchwartzMap

-- TODO: Generalize to vector space `E` using cocompact filter?
/-- A `SchwartzMap` on `‚Ñù` goes to zero at infinity. -/
theorem tendsto_atTop_zero_real (f : ùì¢(‚Ñù, F)) : Filter.Tendsto (fun x => f x) Filter.atTop (nhds 0) := by
  rw [tendsto_zero_iff_norm_tendsto_zero]
  rcases f.decay‚ÇÅ 1 0 with ‚ü®C, hC‚ü©
  simp at hC
  refine tendsto_of_tendsto_of_tendsto_of_le_of_le (h := fun x => C * (1 + |x|)‚Åª¬π) tendsto_const_nhds ?_ ?_ ?_
  . rw [‚Üê mul_zero C]
    refine Filter.Tendsto.const_mul C ?_
    refine Filter.Tendsto.inv_tendsto_atTop ?_
    refine Filter.tendsto_atTop_add_const_left _ 1 ?_
    exact Filter.tendsto_abs_atTop_atTop
  . intro x
    simp
  . intro x
    simp
    rw [‚Üê div_eq_mul_inv]
    rw [le_div_iff (lt_of_lt_of_le zero_lt_one (by simp))]
    rw [mul_comm]
    exact hC x

/-- Maps `f` to `x ‚Ü¶ f (-x)`. -/
def compNegEquiv : ùì¢(E, F) ‚âÉL[‚Ñù] ùì¢(E, F) := compEquiv (LinearIsometryEquiv.neg ‚Ñù (E := E))

@[simp]
lemma compNegEquiv_apply {f : ùì¢(E, F)} {x : E} : compNegEquiv f x = f (-x) := rfl

/-- A `SchwartzMap` on `‚Ñù` goes to zero at negative infinity. -/
theorem tendsto_atBot_zero_real (f : ùì¢(‚Ñù, F)) : Filter.Tendsto (fun x => f x) Filter.atBot (nhds 0) := by
  conv => arg 1; intro x; rw [‚Üê neg_neg x]; rw [‚Üê compNegEquiv_apply]
  exact (tendsto_atTop_zero_real (compNegEquiv f)).comp Filter.tendsto_neg_atBot_atTop

end SchwartzMap  -- namespace

end Tendsto


section Fourier

variable [DecidableEq Œπ] [Fintype Œπ]
variable [NontriviallyNormedField ùïú]
variable [‚àÄ i, NormedAddCommGroup (M i)] [‚àÄ i, NormedSpace ‚Ñù (M i)]

variable [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
-- Note: `NormedSpace ‚Ñù E` provided by `InnerProductSpace.Core.toNormedSpace`.
variable [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]
variable [NormedAddCommGroup E'] [InnerProductSpace ‚Ñù E']
-- Note: `NormedSpace ‚Ñù F` provided by `NormedSpace.complexToReal`.
variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F] [NormedSpace ùïú F]
variable [NormedAddCommGroup G] [NormedSpace ‚Ñù G]
-- Note: `MeasureSpace E` provided by `measureSpaceOfInnerProductSpace`.
variable [MeasurableSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E]
variable [MeasurableSpace E'] [FiniteDimensional ‚Ñù E'] [BorelSpace E']
variable [CompleteSpace F]

section Explicit
variable (M)

lemma Function.hasTemperateGrowth_single (i : Œπ) :
    HasTemperateGrowth (fun u : M i => Pi.single i u) := by
  change HasTemperateGrowth (fun u : M i => ContinuousLinearMap.single (R := ‚Ñù) i u)
  exact hasTemperateGrowth_clm _

end Explicit

namespace SchwartzMap

-- Prove that the Fourier transform of a Schwartz function is a Schwartz function
-- in order to define the Fourier transform of a tempered distribution.
-- https://math.mit.edu/~rbm/iml/Chapter1.pdf
-- https://math.stackexchange.com/questions/445089/fourier-transform-of-a-schwartz-space-function-and-norm
-- https://sites.math.washington.edu/~hart/m556/Lecture25.pdf

-- We already have that the Fourier transform of a Schwartz function is continuous
-- using `VectorFourier.fourierIntegral_continuous` and that Schwartz functions are integrable.

-- Next step is to obtain the derivative of the Fourier transform
-- and the Fourier transform of the derivative.

/-- The real Fourier integrand as a Schwartz function in one variable. -/
noncomputable def realFourierIntegrand (Œæ : ‚Ñù) : ùì¢(‚Ñù, F) ‚ÜíL[‚Ñù] ùì¢(‚Ñù, F) :=
  hasTemperateGrowth_smul (Real.hasTemperateGrowth_fourierChar_neg_mul_const Œæ)

lemma realFourierIntegrand_apply {f : ùì¢(‚Ñù, F)} {Œæ x : ‚Ñù} :
    realFourierIntegrand Œæ f x = Real.fourierChar[-(x * Œæ)] ‚Ä¢ f x := rfl

lemma integral_realFourierIntegrand {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} :
    ùìï f Œæ = ‚à´ x, realFourierIntegrand Œæ f x := rfl

/-- The vector Fourier integrand as a Schwartz function in one variable. -/
noncomputable def vectorFourierIntegrand (Œæ : E) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) :=
  hasTemperateGrowth_smul (Real.hasTemperateGrowth_inner_const Œæ).neg.realFourierChar

lemma vectorFourierIntegrand_apply {f : ùì¢(E, F)} {Œæ x : E} :
    vectorFourierIntegrand Œæ f x = Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x := rfl

-- TODO: Rename "realVectorFourier" to better reflect pi type with l2 inner product
-- ("vectorFourier" already assumes E is a real `InnerProductSpace`).
-- Ideas: l2fourier, l2piFourier, l2realFourier, realL2Fourier, l2vectorFourier, piRealFourier

/-- The real vector Fourier integrand (using pi type) as a Schwartz function in one variable. -/
noncomputable def realVectorFourierIntegrand (Œæ : Œπ ‚Üí ‚Ñù) : ùì¢(Œπ ‚Üí ‚Ñù, F) ‚ÜíL[‚Ñù] ùì¢(Œπ ‚Üí ‚Ñù, F) :=
  hasTemperateGrowth_smul (Real.hasTemperateGrowth_l2inner_const Œæ).neg.realFourierChar

lemma realVectorFourierIntegrand_apply {f : ùì¢(Œπ ‚Üí ‚Ñù, F)} {Œæ x : Œπ ‚Üí ‚Ñù} :
    realVectorFourierIntegrand Œæ f x = Real.fourierChar[-‚àë i, x i * Œæ i] ‚Ä¢ f x := rfl

lemma realVectorFourierIntegrand_eq_vectorFourierIntegrand_euclidean {f : ùì¢(Œπ ‚Üí ‚Ñù, F)} {Œæ : Œπ ‚Üí ‚Ñù} :
    realVectorFourierIntegrand Œæ f =
    compEquiv
      (EuclideanSpace.equiv Œπ ‚Ñù).symm
      (vectorFourierIntegrand (E := EuclideanSpace ‚Ñù Œπ) Œæ (compEquiv (EuclideanSpace.equiv Œπ ‚Ñù) f)) := rfl

lemma realVectorFourierIntegrand_apply_vectorFourierIntegrand_euclidean {f : ùì¢(Œπ ‚Üí ‚Ñù, F)} {Œæ x : Œπ ‚Üí ‚Ñù} :
    realVectorFourierIntegrand Œæ f x =
    vectorFourierIntegrand (E := EuclideanSpace ‚Ñù Œπ) Œæ (compEquiv (EuclideanSpace.equiv Œπ ‚Ñù) f) x := rfl

lemma vectorFourierIntegrand_euclidean_eq_realVectorFourierIntegrand {f : ùì¢(EuclideanSpace ‚Ñù Œπ, F)} {Œæ : EuclideanSpace ‚Ñù Œπ} :
    vectorFourierIntegrand Œæ f =
    compEquiv (EuclideanSpace.equiv Œπ ‚Ñù)
      (realVectorFourierIntegrand Œæ (compEquiv (EuclideanSpace.equiv Œπ ‚Ñù).symm f)) := rfl

lemma vectorFourierIntegrand_euclidean_apply_realVectorFourierIntegrand {f : ùì¢(EuclideanSpace ‚Ñù Œπ, F)} {Œæ x : EuclideanSpace ‚Ñù Œπ} :
    vectorFourierIntegrand Œæ f x =
    realVectorFourierIntegrand Œæ (compEquiv (EuclideanSpace.equiv Œπ ‚Ñù).symm f) x := rfl

lemma vectorFourierIntegrand_compEquiv_symm_apply (e : E ‚âÉ‚Çó·µ¢[‚Ñù] E') {f : ùì¢(E, F)} {Œæ x : E} :
    vectorFourierIntegrand Œæ f x =
    vectorFourierIntegrand (e Œæ) (compEquiv e.symm.toContinuousLinearEquiv f) (e x) := by
  simp [vectorFourierIntegrand_apply]

lemma vectorFourierIntegrand_compEquiv_symm (e : E ‚âÉ‚Çó·µ¢[‚Ñù] E') {f : ùì¢(E, F)} {Œæ : E} :
    vectorFourierIntegrand Œæ f = compEquiv e.toContinuousLinearEquiv
      (vectorFourierIntegrand (e Œæ) (compEquiv e.symm.toContinuousLinearEquiv f)) := by
  ext x
  simp
  exact vectorFourierIntegrand_compEquiv_symm_apply e

lemma vectorFourierIntegrand_compEquiv_apply (e : E' ‚âÉ‚Çó·µ¢[‚Ñù] E) {f : ùì¢(E, F)} {Œæ x : E} :
    vectorFourierIntegrand Œæ f x =
    vectorFourierIntegrand (e.symm Œæ) (compEquiv e.toContinuousLinearEquiv f) (e.symm x) := by
  simp [vectorFourierIntegrand_apply]

lemma vectorFourierIntegrand_compEquiv (e : E' ‚âÉ‚Çó·µ¢[‚Ñù] E) {f : ùì¢(E, F)} {Œæ : E} :
    vectorFourierIntegrand Œæ f = compEquiv e.symm.toContinuousLinearEquiv
      (vectorFourierIntegrand (e.symm Œæ) (compEquiv e.toContinuousLinearEquiv f)) := by
  ext x
  simp
  exact vectorFourierIntegrand_compEquiv_apply e


/-- Express the Fourier integrand for a real `InnerProductSpace` using pi type. -/
lemma vectorFourierIntegrand_apply_realVectorFourierIntegrand_ofOrthonormalBasis (v : OrthonormalBasis Œπ ‚Ñù E)
    {f : ùì¢(E, F)} {Œæ x : E} :
    vectorFourierIntegrand Œæ f x =
    realVectorFourierIntegrand
      (v.repr Œæ)
      (compEquiv (v.repr.toContinuousLinearEquiv.trans (EuclideanSpace.equiv Œπ ‚Ñù)).symm f)
      (v.repr x) := by
  simp [vectorFourierIntegrand_apply, realVectorFourierIntegrand_apply]
  congr
  . rw [‚Üê v.repr.inner_map_map]
    rfl
  . rw [ContinuousLinearEquiv.eq_symm_apply]
    rfl

/-- Express the Fourier integrand for a real `InnerProductSpace` using pi type. -/
lemma vectorFourierIntegrand_eq_realVectorFourierIntegrand_ofOrthonormalBasis (v : OrthonormalBasis Œπ ‚Ñù E)
    {f : ùì¢(E, F)} {Œæ : E} :
    vectorFourierIntegrand Œæ f = compEquiv (v.repr.toContinuousLinearEquiv.trans (EuclideanSpace.equiv Œπ ‚Ñù))
      (realVectorFourierIntegrand
        (v.repr Œæ)
        (compEquiv (v.repr.toContinuousLinearEquiv.trans (EuclideanSpace.equiv Œπ ‚Ñù)).symm f)) := by
  ext x
  simp
  rw [vectorFourierIntegrand_apply_realVectorFourierIntegrand_ofOrthonormalBasis v]
  rfl


lemma vectorFourierIntegrand_smul_apply {f : ùì¢(E, F)} {Œæ x : E} {c : ‚ÑÇ} :
    c ‚Ä¢ vectorFourierIntegrand Œæ f x = Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ (c ‚Ä¢ f) x := by
  simp
  rw [smul_comm]
  rfl

lemma integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    ùìï·µ• f Œæ = ‚à´ x, vectorFourierIntegrand Œæ f x := rfl

lemma contDiff_vectorFourierIntegrand_prod {f : ùì¢(E, F)} :
    ContDiff ‚Ñù ‚ä§ fun m : (E √ó E) => vectorFourierIntegrand m.2 f m.1 := by
  -- Use "of_tower" variant in `ForML.Util`.
  exact ContDiff.smul_of_tower contDiff_inner.neg.realFourierChar (f.smooth'.comp contDiff_fst)

lemma contDiff_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    ContDiff ‚Ñù ‚ä§ (fun Œæ => vectorFourierIntegrand Œæ f x) := by
  change ContDiff ‚Ñù ‚ä§ ((fun p : E √ó E => vectorFourierIntegrand p.2 f p.1) ‚àò (fun Œæ => (x, Œæ)))
  exact ContDiff.comp contDiff_vectorFourierIntegrand_prod (contDiff_prod_mk_right x)

lemma differentiable_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    Differentiable ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) :=
  contDiff_vectorFourierIntegrand.differentiable le_top

lemma continuous_vectorFourierIntegrand {f : ùì¢(E, F)} {x : E} :
    Continuous (fun Œæ => vectorFourierIntegrand Œæ f x) :=
  contDiff_vectorFourierIntegrand.continuous

/--
The Fourier integrand commutes with pointwise smul by the inner product map.

TODO: There's likely a more general version of this lemma for `HasTemperateGrowth` functions
(the Fourier integrand commutes with a pointwise smul action).
-/
lemma innerSL_smul_vectorFourierIntegrand_comm {f : ùì¢(E, F)} {Œæ : E} :
    innerSL_smul (vectorFourierIntegrand Œæ f) =
    vectorFourierIntegrand Œæ (innerSL_smul f) := by
  ext x m
  simp [innerSL_smul_apply, vectorFourierIntegrand_apply]
  rw [smul_comm]

-- -- Give hint to find instance for `(c : ‚ÑÇ) ‚Ä¢ f` in `fderivCLM_vectorFourierIntegrand`.
-- -- noncomputable instance : Module ‚ÑÇ (ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, E ‚ÜíL[‚Ñù] F)) := ContinuousLinearMap.module
-- instance {D E F G : Type*}
--     [NormedAddCommGroup D] [NormedSpace ‚Ñù D]
--     [NormedAddCommGroup E] [NormedSpace ‚Ñù E]
--     [NormedAddCommGroup F] [NormedSpace ‚Ñù F]
--     [NormedAddCommGroup G] [NormedSpace ‚Ñù G] [NormedSpace ‚ÑÇ G] :
--     Module ‚ÑÇ (ùì¢(D, E) ‚ÜíL[‚Ñù] ùì¢(F, G)) := ContinuousLinearMap.module

/--
The Fr√©chet derivative of `vectorFourierIntegrand` with respect to `Œæ`; Schwartz in `x`, linear in `dŒæ`.

The derivative with respect to `x` can be obtained using `SchwartzMap.fderivCLM`.
-/
noncomputable def fderivCLM_vectorFourierIntegrand (Œæ : E) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, E ‚ÜíL[‚Ñù] F) :=
  -((2 * œÄ * I) ‚Ä¢ (vectorFourierIntegrand Œæ).comp (innerSL_smul (F := F)))

lemma fderivCLM_vectorFourierIntegrand_apply {f : ùì¢(E, F)} {x Œæ dŒæ : E} :
    fderivCLM_vectorFourierIntegrand Œæ f x dŒæ =
    -((2 * œÄ * I * ‚ü™x, dŒæ‚ü´) ‚Ä¢ vectorFourierIntegrand Œæ f x) := by
  simp [fderivCLM_vectorFourierIntegrand]
  rw [neg_apply, smul_apply]  -- TODO: Can't use `simp` or `simp only` instead of `rw`?
  simp
  rw [‚Üê innerSL_smul_vectorFourierIntegrand_comm]
  rw [innerSL_smul_apply]
  rw [smul_comm]
  rw [‚Üê smul_assoc]
  simp
  ring_nf

/-- The Fr√©chet derivative of `vectorFourierIntegrand` with respect to `Œæ`. -/
lemma fderiv_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ x : E} :
    fderiv ‚Ñù (fun Œæ' => vectorFourierIntegrand Œæ' f x) Œæ =
    fderivCLM_vectorFourierIntegrand Œæ f x := by
  change fderiv ‚Ñù ((fun u : ‚Ñù => Real.fourierChar[u] ‚Ä¢ f x) ‚àò fun Œæ' : E => -‚ü™x, Œæ'‚ü´) Œæ = _
  refine ContinuousLinearMap.ext ?_
  intro dŒæ
  rw [fderiv.comp]
  rotate_left
  . refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact ContDiff.smul_of_tower Real.contDiff_fourierChar contDiff_const
  . refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact (ContDiff.inner ‚Ñù contDiff_const contDiff_id).neg
  simp
  rw [fderiv_inner_apply ‚Ñù (differentiableAt_const x) differentiableAt_id']
  simp
  rw [fderiv_smul_const]
  swap
  . -- TODO: Avoid repetition?
    refine (ContDiff.differentiable ?_ le_top).differentiableAt
    exact Real.contDiff_fourierChar
  simp
  rw [Real.fderiv_fourierChar]
  simp
  rw [fderivCLM_vectorFourierIntegrand_apply, vectorFourierIntegrand_apply]
  simp
  rw [smul_comm]
  simp [‚Üê smul_assoc]
  ring_nf

-- TODO: More idiomatic to define `HasFDerivAt` before `fderiv`?
lemma hasFDerivAt_vectorFourierIntegrand {f : ùì¢(E, F)} {x Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ : E => vectorFourierIntegrand Œæ f x) (fderivCLM_vectorFourierIntegrand Œæ‚ÇÄ f x) Œæ‚ÇÄ :=
  HasFDerivAt.congr_fderiv
    differentiable_vectorFourierIntegrand.differentiableAt.hasFDerivAt
    fderiv_vectorFourierIntegrand

-- Need to provide assistance?
-- noncomputable instance : SeminormedAddCommGroup (E ‚ÜíL[‚Ñù] ‚ÑÇ) := ContinuousLinearMap.toSeminormedAddCommGroup
-- noncomputable instance : NormedSpace ‚Ñù (E ‚ÜíL[‚Ñù] ‚ÑÇ) := ContinuousLinearMap.toNormedSpace

/-- Uses `‚Äñcexp (_ ‚Ä¢ I)‚Äñ = 1` to obtain norm independent of `Œæ`. -/
lemma norm_fderivCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ x : E} :
    ‚ÄñfderivCLM_vectorFourierIntegrand Œæ f x‚Äñ = 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ := by
    -- ‚Äñfderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ‚Äñ = 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ := by
  suffices : ‚ÄñfderivCLM_vectorFourierIntegrand Œæ f x‚Äñ = ‚ÄñinnerSL_smul ((2 * œÄ) ‚Ä¢ f) x‚Äñ
  . simpa [norm_smul, _root_.abs_of_nonneg Real.pi_pos.le] using this
  simp only [ContinuousLinearMap.norm_def]
  simp only [fderivCLM_vectorFourierIntegrand_apply, vectorFourierIntegrand_apply, innerSL_smul_apply]
  simp
  congr
  ext r
  simp
  intro _
  refine forall_congr' ?_
  intro u
  simp [norm_smul]
  ring_nf

-- Need help for `Continuous.aestronglyMeasurable` in `hasFDerivAt_integral_vectorFourierIntegrand`.
instance {Œ± : Type*} [TopologicalSpace Œ±] : SecondCountableTopologyEither E Œ± := secondCountableTopologyEither_of_left E Œ±

/-- The derivative of the Fourier integral. -/
lemma hasFDerivAt_integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ => ‚à´ x, vectorFourierIntegrand Œæ f x)
      (‚à´ x, fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ‚ÇÄ) Œæ‚ÇÄ := by
  refine hasFDerivAt_integral_of_dominated_of_fderiv_le
      (F' := fun Œæ x => fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ)
      -- (bound := fun x => 2 * œÄ * ‚ÄñinnerSL_smul f x‚Äñ)
      zero_lt_one ?_ (vectorFourierIntegrand Œæ‚ÇÄ f).integrable ?_ ?_
      ((innerSL_smul f).integrable.norm.const_mul (2 * œÄ)) ?_
  . refine Filter.eventually_of_forall ?_
    intro Œæ
    exact Continuous.aestronglyMeasurable (SchwartzMap.continuous _)
  . refine Continuous.aestronglyMeasurable ?_
    simp
    exact Continuous.fderiv contDiff_vectorFourierIntegrand_prod continuous_const le_top
  . refine Filter.eventually_of_forall ?_
    intro x Œæ _
    simp
    rw [fderiv_vectorFourierIntegrand]
    rw [norm_fderivCLM_vectorFourierIntegrand]
  . refine Filter.eventually_of_forall ?_
    intro x Œæ _
    simp
    exact differentiable_vectorFourierIntegrand.differentiableAt.hasFDerivAt

lemma fderiv_integral_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => ‚à´ x, vectorFourierIntegrand Œæ f x) Œæ =
    ‚à´ x, fderiv ‚Ñù (fun Œæ => vectorFourierIntegrand Œæ f x) Œæ :=
  hasFDerivAt_integral_vectorFourierIntegrand.fderiv

/-- Leibniz integral rule for Fourier integrand in terms of CLMs. -/
lemma hasFDerivAt_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ‚ÇÄ : E} :
    HasFDerivAt (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f))
      (integralCLM (fderivCLM_vectorFourierIntegrand Œæ‚ÇÄ f)) Œæ‚ÇÄ := by
  simp_rw [integralCLM_apply]
  simp_rw [‚Üê fderiv_vectorFourierIntegrand]
  exact hasFDerivAt_integral_vectorFourierIntegrand

lemma fderiv_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ =
    integralCLM (fderivCLM_vectorFourierIntegrand Œæ f) :=
  hasFDerivAt_integralCLM_vectorFourierIntegrand.fderiv

lemma fderiv_integralCLM_eq_integralCLM_innerSL_smul {f : ùì¢(E, F)} {Œæ : E} :
    fderiv ‚Ñù (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ =
    -((2 * œÄ * I) ‚Ä¢ integralCLM ((vectorFourierIntegrand Œæ) (innerSL_smul f))) := by
  rw [fderiv_integralCLM_vectorFourierIntegrand]
  rw [fderivCLM_vectorFourierIntegrand]
  simp [integralCLM_neg_apply, integralCLM_smul_apply]

lemma differentiable_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} :
    Differentiable ‚Ñù fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) :=
  fun _ => hasFDerivAt_integralCLM_vectorFourierIntegrand.differentiableAt

lemma continuous_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} :
    Continuous fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) :=
  -- TODO: Is this an upside-down way to prove this?
  -- Could use `integralCLM.continuous.comp`; show that `hasTemperateGrowth_smul` is continuous with Schwartz topology?
  differentiable_integralCLM_vectorFourierIntegrand.continuous

-- `d[exp(-2 œÄ I ‚ü™x, Œæ‚ü´)]`
-- `d[-2 œÄ I ‚ü™x, Œæ‚ü´] exp(-(2 œÄ I ‚ü™x, Œæ‚ü´))`
-- `-2 œÄ I ‚ü™dx, Œæ‚ü´ exp(-(2 œÄ I ‚ü™x, Œæ‚ü´))`

lemma fderiv_fourierChar_inner {x Œæ dŒæ : E} :
    fderiv ‚Ñù (fun Œæ => Real.fourierChar[-‚ü™x, Œæ‚ü´]) Œæ dŒæ =
    -((2 * œÄ * I) * ‚ü™x, dŒæ‚ü´ * Real.fourierChar[-‚ü™x, Œæ‚ü´]) := by
  change fderiv ‚Ñù ((fun u : ‚Ñù => Real.fourierChar[u]) ‚àò (fun Œæ : E => -‚ü™x, Œæ‚ü´)) Œæ dŒæ = _
  rw [fderiv.comp]
  rotate_left
  . exact (Real.contDiff_fourierChar.differentiable le_top).differentiableAt
  . exact (DifferentiableAt.inner ‚Ñù (differentiableAt_const x) differentiableAt_id).neg
  rw [ContinuousLinearMap.comp_apply]
  simp
  rw [fderiv_inner_apply ‚Ñù (differentiableAt_const x) differentiableAt_id']
  simp [Real.fderiv_fourierChar]
  ring_nf

-- `d^n[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= -2 œÄ I ‚ü™x, dŒæ_0‚ü´ d^(n-1)[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= (-2 œÄ I)^2 ‚ü™x, dŒæ 0‚ü´ ‚ü™x, dŒæ 1‚ü´ d^(n-2)[ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ]`
-- `= (-2 œÄ I)^n ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´)`

-- `‚Äñd^n[exp(-2 œÄ I ‚ü™x, Œæ‚ü´)] ‚Ä¢ f x‚Äñ`
-- `= ‚Äñ(-2 œÄ I)^n ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x‚Äñ`
-- `= (2 œÄ)^n ‚Äñ‚ü™x, dŒæ 0‚ü´ ... ‚ü™x, dŒæ (n-1)‚ü´ exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x‚Äñ`

-- `‚Äñ ‚à´ x, exp(-2 œÄ I ‚ü™x, Œæ‚ü´) ‚Ä¢ f x ‚Äñ`
-- ...

-- Is this useful for proving bound?
lemma norm_integral_vectorFourierIntegrand_le {f : ùì¢(E, F)} {Œæ : E} :
    ‚Äñ‚à´ x, vectorFourierIntegrand Œæ f x‚Äñ ‚â§ ‚à´ x, ‚Äñf x‚Äñ := by
  refine norm_integral_le_of_norm_le f.integrable.norm ?_
  refine Filter.eventually_of_forall ?_
  intro x
  simp [vectorFourierIntegrand_apply, norm_smul]

lemma norm_integralCLM_vectorFourierIntegrand_le {f : ùì¢(E, F)} {Œæ : E} :
    ‚ÄñintegralCLM (vectorFourierIntegrand Œæ f)‚Äñ ‚â§ ‚à´ x, ‚Äñf x‚Äñ := by
  rw [integralCLM_apply]
  exact norm_integral_vectorFourierIntegrand_le

/-- Integration by parts for the Fourier integral of the derivative of a Schwartz function on ‚Ñù. -/
lemma intervalIntegral_integrand_deriv_sub_smul_integrand {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} {a b : ‚Ñù} :
    (‚à´ (x : ‚Ñù) in a..b, realFourierIntegrand Œæ (derivCLM ‚Ñù f) x - ((2 * œÄ * I * Œæ) ‚Ä¢ realFourierIntegrand Œæ f x)) =
      realFourierIntegrand Œæ f b - realFourierIntegrand Œæ f a := by
  have := intervalIntegral.integral_deriv_smul_eq_sub (a := a) (b := b)
    (u := (fun x => Real.fourierChar[-(x * Œæ)]))
    (v := (fun x => f x))
    (u' := (fun x => (-Œæ) ‚Ä¢ (2 * œÄ * I * Real.fourierChar[-(x * Œæ)])))
    (v' := (fun x => deriv f x))
    (fun x _ => HasDerivAt.comp_of_tower x Real.hasDerivAt_fourierChar (hasDerivAt_mul_const Œæ).neg)
    (fun x _ => f.differentiableAt.hasDerivAt) ?_ ?_
  rotate_left
  . refine Continuous.continuousOn ?_
    refine ((continuous_const).mul ?_).const_smul (-Œæ)
    exact (continuous_mul_right Œæ).neg.realFourierChar
  . refine Continuous.continuousOn ?_
    simp_rw [‚Üê derivCLM_apply ‚Ñù]
    exact (derivCLM ‚Ñù f).continuous
  simp at this
  conv => rhs; simp [realFourierIntegrand_apply]
  rw [‚Üê this]
  clear this
  congr
  funext x
  simp [realFourierIntegrand_apply, derivCLM_apply]
  simp [smul_smul, neg_add_eq_sub]
  ring_nf

-- TODO: Should be possible to obtain `Tendsto f atTop (nhds 0)` from `Integrable f` and `Continuous f`?
-- For now, prove it for the specific case that we have instead.

/-- The Fourier integral of the derivative of a Schwartz function on ‚Ñù. -/
lemma realFourierIntegral_deriv {f : ùì¢(‚Ñù, F)} {Œæ : ‚Ñù} :
    ùìï (fun x => deriv (fun y => f y) x) Œæ = (2 * œÄ * I * Œæ) ‚Ä¢ ùìï (fun x => f x) Œæ := by
  -- Replace `fourierChar[_]` with `realFourierIntegrand`; easy to show integrable and differentiable.
  change ‚à´ x, realFourierIntegrand Œæ (derivCLM ‚Ñù f) x = (2 * œÄ * I * Œæ) ‚Ä¢ ‚à´ x : ‚Ñù, realFourierIntegrand Œæ f x
  rw [‚Üê sub_eq_zero]
  rw [‚Üê integral_smul]
  rw [‚Üê integral_sub (integrable _)]
  swap
  . exact (integrable _).smul _  -- This can't be put inside the rewrite?

  have h_cover : AECover volume Filter.atTop (fun i => Set.Ioc (-i) i : ‚Ñï ‚Üí Set ‚Ñù)
  . refine aecover_Ioc ?_ ?_ <;> simp [Filter.tendsto_neg_atBot_iff, tendsto_nat_cast_atTop_atTop]

  refine AECover.integral_eq_of_tendsto h_cover _ ?_ ?_
  . refine Integrable.sub ?_ ?_
    . have := integrable (realFourierIntegrand Œæ (derivCLM ‚Ñù f))
      simp only [realFourierIntegrand_apply, derivCLM_apply] at this
      exact this
    . have := integrable ((2 * œÄ * I * Œæ) ‚Ä¢ (realFourierIntegrand Œæ f))
      simp only [smul_apply, smul_eq_mul, realFourierIntegrand_apply] at this
      exact this
  simp_rw [‚Üê intervalIntegral.integral_of_le (neg_le_self_iff.mpr (Nat.cast_nonneg _))]
  simp_rw [intervalIntegral_integrand_deriv_sub_smul_integrand]

  rw [‚Üê sub_zero 0]
  refine Filter.Tendsto.sub ?_ ?_
  . refine Filter.Tendsto.comp ?_ tendsto_nat_cast_atTop_atTop
    exact tendsto_atTop_zero_real (realFourierIntegrand Œæ f)
  . change Filter.Tendsto ((fun x => realFourierIntegrand Œæ f (-x)) ‚àò (fun n => n : ‚Ñï ‚Üí ‚Ñù)) Filter.atTop (nhds 0)
    refine Filter.Tendsto.comp ?_ tendsto_nat_cast_atTop_atTop
    simp_rw [‚Üê compNegEquiv_apply]
    exact tendsto_atTop_zero_real (compNegEquiv (realFourierIntegrand Œæ f))


-- Define some compositions that may be useful for taking partial derivative.
section CompCLM

variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ‚Ñù E]

-- Simpler case than `compAddSingleCLM`; just translation.
def compConstAddCLM (b : E) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) :=
  compCLM ‚Ñù (g := fun x => b + x)
    (Function.hasTemperateGrowth_id'.const_add b)
    (by
      refine ‚ü®1, 1 + ‚Äñb‚Äñ, ?_‚ü©
      intro y
      simp [add_mul, mul_add, ‚Üê add_assoc]
      refine le_trans (norm_le_add_norm_add y b) ?_
      rw [add_comm y]
      rw [add_comm ‚Äñb + y‚Äñ ‚Äñb‚Äñ]
      refine le_add_of_le_of_nonneg ?_ (mul_nonneg ?_ ?_) <;> simp)

lemma compConstAddCLM_apply {b u : ‚àÄ i, M i} {f : ùì¢((i : Œπ) ‚Üí M i, F)} :
    compConstAddCLM b f u = f (b + u) := rfl

-- def compSMulRightCLM {v : E} (hv : ‚Äñv‚Äñ ‚â† 0) : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(‚Ñù, F) :=
--   compCLM ‚Ñù (g := fun x => x ‚Ä¢ v)
--     (Function.hasTemperateGrowth_id'.smul_const v)
--     (by
--       refine ‚ü®1, ‚Äñv‚Äñ‚Åª¬π, ?_‚ü©
--       intro x
--       simp
--       rw [inv_mul_eq_div]
--       rw [le_div_iff (lt_of_le_of_ne' (norm_nonneg _) hv)]
--       simp [norm_smul])

-- lemma compSMulRightCLM_apply {v : E} (hv : ‚Äñv‚Äñ ‚â† 0) {f : ùì¢(E, F)} {x : ‚Ñù} :
--     compSMulRightCLM hv f x = f (x ‚Ä¢ v) := rfl

end CompCLM

def compSingleCLM (i : Œπ) : ùì¢((i : Œπ) ‚Üí M i, F) ‚ÜíL[‚Ñù] ùì¢(M i, F) :=
  compCLM ‚Ñù (g := fun x => Pi.single i x)
    (Function.hasTemperateGrowth_clm (ContinuousLinearMap.single (R := ‚Ñù) (M := M) i))
    ‚ü®1, 1, fun x => by simp‚ü©

lemma compSingleCLM_apply {i : Œπ} {f : ùì¢((i : Œπ) ‚Üí M i, F)} {u : M i} :
    compSingleCLM i f u = f (Pi.single i u) := rfl

-- TODO: Not sure whether it's useful to have f as a function of `EuclideanSpace`...
-- Note that it changes the definition of norm compared to pi.

lemma realVectorFourierIntegral_pderivCLM_single {i : Œπ} {f : ùì¢(Œπ ‚Üí ‚Ñù, F)} {Œæ : Œπ ‚Üí ‚Ñù} :
    ùìï‚Çô (pderivCLM ‚Ñù (Pi.single i 1) f) Œæ = (2 * œÄ * I * Œæ i) ‚Ä¢ ùìï‚Çô f Œæ := by
  rw [RealVectorFourier.fourierIntegral_l2inner_apply]
  -- Break up the integral.
  rw [integral_piSplitAt_right i]
  swap
  . simp_rw [‚Üê realVectorFourierIntegrand_apply]  -- TODO: Extract to lemma without rw?
    exact integrable _
  -- Split the sum.
  have h_mem (j) : j ‚àà Finset.univ \ {i} ‚Üî j ‚â† i := by simp
  conv => lhs; simp only [Finset.sum_eq_add_sum_diff_singleton (Finset.mem_univ i)]
  simp only [dite_true, Finset.sum_subtype _ h_mem]
  simp [Finset.sum_ite]
  conv => lhs; arg 2; intro x; arg 2; intro u; lhs; rw [‚Üê smul_eq_mul]
  simp only [smul_assoc]
  simp only [integral_smul]

  simp only [‚Üê deriv_comp_update (f.differentiableAt)]
  simp only [Equiv.piSplitAt_symm_apply (j := i), dite_true]
  simp only [Function.update_piSplitAt_symm]
  conv =>
    lhs; arg 2; intro x; rhs
    -- Express as the derivative of a Schwartz function.
    conv =>
      arg 2; intro y; rhs; arg 1; intro u
      rw [‚Üê Equiv.piSplitAt_symm_zero_add_single]
      rw [‚Üê compConstAddCLM_apply]
      rw [‚Üê compSingleCLM_apply]
    -- Rewrite using theorem for scalar Fourier transform.
    rw [‚Üê Real.fourierIntegral_def]
    rw [realFourierIntegral_deriv]

  simp only [compConstAddCLM_apply, compSingleCLM_apply]
  conv => lhs; arg 2; intro x; rw [smul_comm]
  rw [integral_smul]
  refine congrArg _ ?_  -- More idiomatic way to do this?
  simp only [Real.fourierIntegral_def]
  simp only [‚Üê integral_smul]
  simp only [smul_smul]

  rw [RealVectorFourier.fourierIntegral_l2inner_apply]
  rw [integral_piSplitAt_right i]
  swap
  . simp only [‚Üê realVectorFourierIntegrand_apply]
    exact integrable _
  refine congrArg _ ?_
  ext x
  refine congrArg _ ?_
  ext u
  congr
  . rw [Finset.sum_eq_add_sum_diff_singleton (Finset.mem_univ i)]
    simp only [Finset.sum_subtype _ h_mem]
    simp [Finset.sum_ite]
  . rw [Equiv.piSplitAt_symm_zero_add_single]


lemma vectorFourierIntegral_pderivCLM_single_euclidean {i : Œπ} {f : ùì¢(EuclideanSpace ‚Ñù Œπ, F)} {Œæ : EuclideanSpace ‚Ñù Œπ} :
    ùìï·µ• (pderivCLM ‚Ñù (EuclideanSpace.single i 1) f) Œæ = (2 * œÄ * I * Œæ i) ‚Ä¢ ùìï·µ• f Œæ := by
  rw [RealVectorFourier.fourierIntegral_euclidean_eq_fourierIntegral_l2inner]
  rw [RealVectorFourier.fourierIntegral_euclidean_eq_fourierIntegral_l2inner]
  have := realVectorFourierIntegral_pderivCLM_single (i := i)
    (f := compEquiv (EuclideanSpace.equiv Œπ ‚Ñù).symm f) (Œæ := (EuclideanSpace.equiv Œπ ‚Ñù) Œæ)
  -- Use equivalence to modify derivative as well.
  conv at this =>
    lhs; arg 4; intro x
    simp
    conv => arg 1; arg 2; intro y; simp
    change fderiv ‚Ñù (f ‚àò ‚áë(EuclideanSpace.equiv Œπ ‚Ñù).symm) x (Pi.single i 1)
    rw [ContinuousLinearEquiv.comp_right_fderiv]
    rw [ContinuousLinearMap.comp_apply]
  exact this

lemma vectorFourierIntegral_pderivCLM_single_ofOrthonormalBasis (v : OrthonormalBasis Œπ ‚Ñù E) {i : Œπ} {f : ùì¢(E, F)} {Œæ : E} :
    ùìï·µ• (pderivCLM ‚Ñù (v.repr.symm (Pi.single i 1)) f) Œæ = (2 * œÄ * I * (v.repr Œæ) i) ‚Ä¢ ùìï·µ• f Œæ := by
  rw [RealVectorFourier.fourierIntegral_eq_fourierIntegral_euclidean_ofOrthonormalBasis v]
  rw [RealVectorFourier.fourierIntegral_eq_fourierIntegral_euclidean_ofOrthonormalBasis v]
  have := vectorFourierIntegral_pderivCLM_single_euclidean (i := i)
    (f := compEquiv v.repr.symm f) (Œæ := v.repr Œæ)
  conv at this =>
    lhs; arg 4; intro x
    simp
    conv => arg 1; arg 2; intro y; simp
    change fderiv ‚Ñù (f ‚àò ‚áëv.repr.toContinuousLinearEquiv.symm) x (EuclideanSpace.single i 1)
    rw [ContinuousLinearEquiv.comp_right_fderiv]
    simp
  exact this

-- TODO: Implement directional derivative (not just canonical directions).
-- Use `proj` and `ker`?

end SchwartzMap  -- namespace

end Fourier

end NoTypeInduction


-- TODO: Rewrite avoiding induction over type.
section TypeInduction

universe u
variable {E F : Type u}  -- Ensure that `E ‚ÜíL[‚Ñù] F` is in the same universe as `F`.

variable [NormedAddCommGroup E] [InnerProductSpace ‚Ñù E]
variable [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F]
variable [MeasurableSpace E] [FiniteDimensional ‚Ñù E] [BorelSpace E]
variable [CompleteSpace F]

namespace SchwartzMap

/-- The Fourier integral of a Schwartz map is smooth. -/
theorem contDiff_integralCLM_vectorFourierIntegrand {f : ùì¢(E, F)} : ContDiff ‚Ñù ‚ä§ fun Œæ => integralCLM (vectorFourierIntegrand Œæ f) := by
  rw [contDiff_top]
  intro n
  induction n generalizing F with
  | zero =>
    simp
    exact continuous_integralCLM_vectorFourierIntegrand
  | succ n h_ind =>
    rw [contDiff_succ_iff_fderiv]
    refine ‚ü®differentiable_integralCLM_vectorFourierIntegrand, ?_‚ü©
    simp_rw [fderiv_integralCLM_eq_integralCLM_innerSL_smul]
    refine ContDiff.neg ?_
    refine ContDiff.const_smul (2 * œÄ * I : ‚ÑÇ) ?_
    -- Need `E ‚ÜíL[‚Ñù] F` to be in same universe as `F` to apply induction.
    exact h_ind

/-- The Fourier integral of a Schwartz map is smooth. -/
theorem contDiff_fourierIntegral {f : ùì¢(E, F)} : ContDiff ‚Ñù ‚ä§ fun Œæ => ‚à´ x, Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x := by
  simp_rw [‚Üê vectorFourierIntegrand_apply]
  simp_rw [‚Üê integralCLM_apply]
  exact contDiff_integralCLM_vectorFourierIntegrand

lemma norm_iteratedFDeriv_integralCLM_fourierIntegrand_le {n : ‚Ñï} {f : ùì¢(E, F)} {Œæ : E} :
    ‚ÄñiteratedFDeriv ‚Ñù n (fun Œæ => integralCLM (vectorFourierIntegrand Œæ f)) Œæ‚Äñ ‚â§ (2 * œÄ) ^ n * ‚à´ x, ‚Äñx‚Äñ ^ n * ‚Äñf x‚Äñ := by
  induction n generalizing F with
  | zero =>
    simp
    exact norm_integralCLM_vectorFourierIntegrand_le
  | succ n h_ind =>
    simp [iteratedFDeriv_succ_eq_comp_right]
    simp_rw [fderiv_integralCLM_eq_integralCLM_innerSL_smul]
    rw [iteratedFDeriv_neg_apply']
    rw [iteratedFDeriv_const_smul_apply']
    swap
    . exact contDiff_integralCLM_vectorFourierIntegrand.of_le le_top
    -- simp
    -- rw [norm_neg]  -- Assistance needed?
    rw [norm_neg (E := ContinuousMultilinearMap _ _ _)]
    rw [norm_smul]
    simp
    rw [abs_of_pos Real.pi_pos]
    rw [pow_succ]
    rw [mul_assoc (2 * œÄ)]
    refine mul_le_mul_of_nonneg_left ?_ (by simp [Real.pi_pos.le])
    specialize h_ind (f := innerSL_smul f)
    refine le_trans h_ind ?_
    refine mul_le_mul_of_nonneg_left ?_ (by simp [Real.pi_pos.le])
    refine integral_mono integrable_norm_pow_mul_norm integrable_norm_pow_mul_norm ?_
    intro x
    simp
    rw [pow_succ']
    rw [mul_assoc]
    refine mul_le_mul_of_nonneg_left ?_ (by simp)
    rw [ContinuousLinearMap.op_norm_le_iff]
    swap
    . refine mul_nonneg ?_ ?_ <;> simp
    intro y
    rw [innerSL_smul_apply]
    simp_rw [norm_smul]
    repeat rw [mul_comm _ ‚Äñf x‚Äñ]
    rw [mul_assoc]
    refine mul_le_mul_of_nonneg_left ?_ (by simp)
    exact norm_inner_le_norm x y

/-- The Fourier integral of a Schwartz function as a ContinuousLinearMap. -/
noncomputable def realFourierIntegralCLM : ùì¢(‚Ñù, F) ‚ÜíL[‚Ñù] ùì¢(‚Ñù, F) :=
  mkCLM (fun f Œæ => ‚à´ x, Real.fourierChar[-(x * Œæ)] ‚Ä¢ f x)
    (fun œÜ Œ∏ Œæ => by
      simp [‚Üê realFourierIntegrand_apply]
      rw [integral_add (integrable _) (integrable _)])
    (fun c œÜ Œæ => by
      simp [smul_comm _ c]
      rw [integral_smul])
    (fun œÜ => sorry)
    (fun m => by
      simp only [‚Üê realFourierIntegrand_apply]
      -- simp_rw [norm_iteratedFDeriv_eq_norm_iteratedDeriv]
      sorry)

/-- The Fourier integral of a Schwartz function as a ContinuousLinearMap. -/
noncomputable def vectorFourierIntegralCLM {r : ‚Ñï} [hr : Fact (FiniteDimensional.finrank ‚Ñù E < r)] : ùì¢(E, F) ‚ÜíL[‚Ñù] ùì¢(E, F) :=
  mkCLM (fun f Œæ => ‚à´ x, Real.fourierChar[-‚ü™x, Œæ‚ü´] ‚Ä¢ f x)
    (fun œÜ Œ∏ Œæ => by
      simp [‚Üê vectorFourierIntegrand_apply]
      rw [integral_add (integrable _) (integrable _)])
    (fun c œÜ Œæ => by
      simp [smul_comm _ c]
      rw [integral_smul])
    (fun œÜ => contDiff_fourierIntegral)
    (fun m => by
      simp [‚Üê vectorFourierIntegrand_apply, ‚Üê integralCLM_apply]
      -- simp_rw [integralCLM_eq_L1_integral]
      have k' := 5
      have n' := 7
      have C' := œÄ
      use Finset.Iic (k', n')
      use C'
      refine ‚ü®sorry, ?_‚ü©
      intro œÜ Œæ
      have := tendsto_integral_exp_inner_smul_cocompact œÜ
      -- Have that the integral tends to zero at infinity and is ContDiff.
      -- However, we still need to show that it decays faster than polynomial.
      -- Need to use the fact that the Fourier transform of the derivative has a 1/Œæ^n term?
      have hœÜ := œÜ.decay'
      rcases m with ‚ü®k, n‚ü©
      simp
      refine le_trans (mul_le_mul_of_nonneg_left norm_iteratedFDeriv_integralCLM_fourierIntegrand_le (by simp)) ?_
      sorry)

end SchwartzMap  -- namespace

end TypeInduction
